<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>服务器推送</title>
      <link href="/back-end/2019-03-19-server-push.html"/>
      <url>/back-end/2019-03-19-server-push.html</url>
      
        <content type="html"><![CDATA[<h2 id="http协议介绍"><a href="#http协议介绍" class="headerlink" title="http协议介绍"></a>http协议介绍</h2><ul><li>http协议是请求/响应范式的，每个http 响应都对应一个 http 请求，http协议是无状态的，多个http请求之间是没有关系的；</li><li>http协议的被动性，在标准的HTTP请求响应语义中，浏览器发起请求，服务器发送一个响应，这意味着在浏览器发起新请求前，服务器不能发送新信息给客户端浏览器；</li></ul><p><img src="https://raw.githubusercontent.com/hr1ycfl/blog-images/master/2019-03-19-15%3A28%3A24.png" alt=""></p><h2 id="Ajax短轮询"><a href="#Ajax短轮询" class="headerlink" title="Ajax短轮询"></a>Ajax短轮询</h2><h2 id="Ajax长论询"><a href="#Ajax长论询" class="headerlink" title="Ajax长论询"></a>Ajax长论询</h2><h2 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h2>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java服务器推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter Widget 目录</title>
      <link href="/Flutter/2019-03-08-flutter-widget-menu.html"/>
      <url>/Flutter/2019-03-08-flutter-widget-menu.html</url>
      
        <content type="html"><![CDATA[<h2 id="widget库"><a href="#widget库" class="headerlink" title="widget库"></a>widget库</h2><h3 id="扑组件框架"><a href="#扑组件框架" class="headerlink" title="扑组件框架"></a>扑组件框架</h3><p>使用方法：进口 package:flutter/widgets.dart</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="AbsorbPointer"><a href="#AbsorbPointer" class="headerlink" title="AbsorbPointer"></a>AbsorbPointer</h4><p>在命中测试期间吸收指针的widget。[…]</p><h4 id="align"><a href="#align" class="headerlink" title="align"></a>align</h4><p>一个widget，用于将其子项与其自身对齐，并根据子级的大小自行调整大小。[…]</p><h4 id="对准"><a href="#对准" class="headerlink" title="对准"></a>对准</h4><p>矩形内的一个点。[…]</p><h4 id="AlignmentDirectional"><a href="#AlignmentDirectional" class="headerlink" title="AlignmentDirectional"></a>AlignmentDirectional</h4><p>偏移量，表示为“ 大小”的一部分，但其水平分量取决于书写方向。[…]</p><h4 id="AlignmentGeometry"><a href="#AlignmentGeometry" class="headerlink" title="AlignmentGeometry"></a>AlignmentGeometry</h4><p>Alignment的 基类，允许文本方向感知分辨率。[…]</p><h4 id="AlignmentGeometryTween"><a href="#AlignmentGeometryTween" class="headerlink" title="AlignmentGeometryTween"></a>AlignmentGeometryTween</h4><p>两个AlignmentGeometry之间的插值。[…]</p><h4 id="AlignmentTween"><a href="#AlignmentTween" class="headerlink" title="AlignmentTween"></a>AlignmentTween</h4><p>两个对齐之间的插值。[…]</p><h4 id="AlignTransition"><a href="#AlignTransition" class="headerlink" title="AlignTransition"></a>AlignTransition</h4><p>Align的 动画版本，可以为其Align.alignment属性设置动画。</p><h4 id="AlwaysScrollableScrollPhysics"><a href="#AlwaysScrollableScrollPhysics" class="headerlink" title="AlwaysScrollableScrollPhysics"></a>AlwaysScrollableScrollPhysics</h4><p>滚动物理总是让用户滚动。[…]</p><h4 id="AlwaysStoppedAnimation"><a href="#AlwaysStoppedAnimation" class="headerlink" title="AlwaysStoppedAnimation "></a>AlwaysStoppedAnimation <T></h4><p>在给定值停止的动画[…]</p><h4 id="Animate-lt-T-gt"><a href="#Animate-lt-T-gt" class="headerlink" title="Animate&lt; T &gt;"></a>Animate&lt; T &gt;</h4><p>一个通过输入动画来生成类型为T的值的对象。[…]</p><h4 id="AnimatedAlign"><a href="#AnimatedAlign" class="headerlink" title="AnimatedAlign"></a>AnimatedAlign</h4><p>Align的 动画版本，只要给定的对齐发生变化，就会在给定的持续时间内自动转换child的位置。[…]</p><h4 id="AnimatedBuilder"><a href="#AnimatedBuilder" class="headerlink" title="AnimatedBuilder"></a>AnimatedBuilder</h4><p>用于构建动画的通用widget。[…]</p><p>AnimatedContainer<br>在一段时间内逐渐更改其值的容器。[…]</p><p>AnimatedCrossFade<br>一个widget，它在两个给定的子节点之间交叉淡化，并在它们的大小之间设置动画。[…]</p><p>AnimatedDefaultTextStyle</p><p>DefaultTextStyle的 动画版本，无论何时给定的样式发生更改，都会在给定的持续时间内自动转换默认文本样式（文本样式以应用于没有显式样式的后代Text widget）。[…]</p><p>AnimatedList<br>一个滚动容器，可在插入或移除项目时为其设置动画。[…]</p><p>AnimatedListState<br>滚动容器的状态，在插入或移除项目时为其设置动画。[…]</p><p>AnimatedModalBarrier<br>一个widget，可以防止用户与自身后面的widget交互，并且可以使用动画颜色值进行配置。[…]</p><p>AnimatedOpacity<br>不透明度的 动画版本，只要给定的不透明度发生变化，就会自动转换child在给定持续时间内的不透明度。[…]</p><p>AnimatedPadding<br>Padding的 动画版本，无论何时给定的插入更改，它都会在给定的持续时间内自动转换缩进。[…]</p><p>AnimatedPhysicalModel<br>PhysicalModel的 动画版本。[…]</p><p>AnimatedPositioned<br>定位的 动画版本，可在给定位置发生变化时自动转换child在给定持续时间内的位置。[…]</p><p>AnimatedPositionedDirectional<br>PositionedDirectional的 动画版本，可在给定位置发生变化时自动转换child在给定持续时间内的位置。[…]</p><p>AnimatedSize<br>动画窗口widget，只要给定子项的大小发生更改，就会在给定的持续时间内自动转换其大小。</p><p>AnimatedSwitcher<br>默认情况下，窗口widget在新窗口widget和先前在AnimatedSwitcher上设置为窗口widget的窗口widget之间执行FadeTransition。[…]</p><p>AnimatedWidget<br>在给定的Listenable更改值时重建的窗口widget。[…]</p><p>AnimatedWidgetBaseState &lt; T扩展了ImplicitlyAnimatedWidget &gt;<br>具有隐式动画的widget的基类。[…]</p><p>Animate&lt; T &gt;<br>值为type的动画T。[…]</p><p>AnimationController<br>动画控制器。[…]</p><p>AnimationEagerListenerMixin<br>一个mixin用dispose契约替换didRegisterListener / didUnregisterListener契约。</p><p>AnimationLazyListenerMixin<br>mixin仅在此对象已注册侦听器时帮助侦听另一个对象。</p><p>AnimationLocalListenersMixin<br>一个mixin，它实现addListener / removeListener协议，并在调用notifyListeners时通知所有已注册的侦听器。</p><p>AnimationLocalStatusListenersMixin<br>一个mixin，它实现addStatusListener / removeStatusListener协议，并在调用notifyStatusListeners时通知所有已注册的侦听器。</p><p>AnimationMax &lt; T extends num &gt;<br>跟踪最多两个其他动画的动画。[…]</p><p>AnimationMean<br>双 s 的动画，跟踪其他两个动画的平均值。[…]</p><p>AnimationMin &lt; T extends num &gt;<br>跟踪最少两个其他动画的动画。[…]</p><p>AnimationWithParentMixin &lt; T &gt;<br>通过将其行为推迟到给定的父动画来 实现大多数动画界面。[…]</p><p>ASPECTRATIO<br>尝试将子项调整为特定宽高比的widget。[…]</p><p>AssetBundleImageKey<br>由AssetImage或ExactAssetImage获取的图像的键。[…]</p><p>AssetBundleImageProvider<br>ImageProvider的 一个子类，它知道AssetBundle。[…]</p><p>AssetImage<br>从AssetBundle获取图像，根据上下文确定要使用的确切图像。[…]</p><p>AsyncSnapshot &lt; T &gt;<br>与异步计算的最新交互的不可变表示。[…]</p><p>AutomaticKeepAlive<br>允许子树请求在惰性列表中保持活动状态。[…]</p><p>AutomaticKeepAliveClientMixin &lt; T扩展StatefulWidget &gt;<br>为AutomaticKeepAlive的客户提供方便的方法。[…]</p><p>BackdropFilter<br>一个widget，它将过滤器应用于现有的绘制内容，然后绘制子项。[…]</p><p>BallisticScrollActivity<br>基于物理模拟动画滚动视图的活动。[…]</p><p>旗帜<br>在另一个widget的角落上方显示对角线消息。[…]</p><p>BannerPainter<br>画横幅。<br>底线<br>根据child的基线定位child的widget。[…]</p><p>BeveledRectangleBorder<br>带有扁平或“斜角”角的矩形边框。[…]</p><p>BlockSemantics<br>一个窗口widget，它删除在同一个语义容器中绘制在其之前的所有窗口widget的语义。[…]</p><p>边境<br>盒子的边框，由四个边组成：顶部，右侧，底部，左侧。[…]</p><p>BorderDirectional<br>盒子的边框，由四个边组成，其侧面基于读取方向翻转。[…]</p><p>BorderRadius<br>矩形每个角的一组不可变半径。[…]</p><p>BorderRadiusDirectional<br>矩形的每个角的一组不可变半径，但是角的指定方式取决于书写方向。[…]</p><p>BorderRadiusGeometry<br>BorderRadius的 基类，允许文本方向感知解析。[…]</p><p>BorderRadiusTween<br>两个BorderRadius之间的插值。[…]</p><p>BorderSide<br>盒子边框的一面。[…]</p><p>BottomNavigationBarItem<br>材质的BottomNavigationBar 或带有图标和标题的iOS主题CupertinoTabBar中的交互式按钮。[…]</p><p>BouncingScrollPhysics<br>滚动物理环境允许滚动偏移超出内容范围，但随后将内容反弹回这些边界的边缘。[…]</p><p>BouncingScrollSimulation<br>与iOS匹配的滚动物理实现。[…]</p><p>BoxBorder<br>框边框的基类，可以绘制为矩形，圆形或圆角矩形。[…]</p><p>BoxConstraints<br>不可变的布局约束RenderBox布局。[…]</p><p>BoxConstraintsTween<br>两个BoxConstraints之间的插值。[…]</p><p>BoxDecoration<br>关于如何绘制框的不可变描述。[…]</p><p>BoxPainter<br>一个有状态的类，可以绘制一个特定的装饰。[…]</p><p>BoxScrollView<br>一个滚动型采用单个子布局的模型。[…]</p><p>BoxShadow<br>由盒子投下的阴影。[…]</p><p>BuildContext<br>窗口widget树中窗口widget位置的句柄。[…]</p><p>生成器<br>一个柏拉图窗口widget，它调用闭包来获取其子窗口widget。[…]</p><p>BuildOwner<br>窗口widget框架的管理器类。[…]</p><p>帆布<br>用于记录图形操作的界面。[…]</p><p>中央<br>一个小孩，它将child置于其中心。[…]</p><p>ChangeNotifier<br>可以扩展或混合的类，使用VoidCallback为通知提供更改通知API 。[…]</p><p>CheckedModeBanner<br>在已检查模式下运行时 显示标有“DEBUG” 的横幅。 MaterialApp默认构建其中一个。在发布模式下无效。</p><p>CircleBorder<br>适合可用空间内圆圈的边框。[…]</p><p>ClampingScrollPhysics<br>滚动物理场以防止滚动偏移超出内容边界的环境。[…]</p><p>ClampingScrollSimulation<br>与Android匹配的滚动物理实现。[…]</p><p>ClipOval<br>使用椭圆剪辑其子项的widget。[…]</p><p>ClipPath<br>使用路径剪辑其子项的窗口widget。[…]</p><p>ClipRect<br>使用矩形剪辑其子项的widget。[…]</p><p>ClipRRect<br>使用圆角矩形剪辑其子项的窗口widget。[…]</p><p>颜色<br>ARGB格式的不可变32位颜色值。[…]</p><p>ColorFilter<br>描述在绘制形状或使用特定Paint合成图层时应用的滤镜。滤色器是一种采用两种颜色并输出一种颜色的功能。在合成期间应用时，在整个图层与目标合并之前，它将独立应用于正在绘制的图层的每个像素。[…]</p><p>ColorSwatch &lt; T &gt;<br>一种颜色，有一个相关颜色的小表称为“样本”。[…]</p><p>ColorTween<br>两种颜色之间的插值。[…]</p><p>柱<br>在垂直方向排列布局子控件的控件[…]</p><p>ComponentElement<br>一个元素是组成其他要素秒。[…]</p><p>CompositedTransformFollower<br>一个遵循CompositedTransformTarget的widget。[…]</p><p>CompositedTransformTarget<br>CompositedTransformFollower 可以定位的widget。[…]</p><p>CompoundAnimation &lt; T &gt;<br>用于组合多个动画的界面。子类只需要实现valuegetter来控制子动画的组合方式。可以链接组合2个以上的动画。[…]</p><p>ConstrainedBox<br>一个widget，对其子级施加其他约束。[…]</p><p>容器<br>一个结合了常用的绘图组件，定位组件和尺寸组件的便捷组件。[…]</p><p>立方体<br>单位区间的三次多项式映射。[…]</p><p>曲线<br>单位间隔到单位间隔的映射。[…]</p><p>CurvedAnimation<br>将曲线应用于另一个动画的动画。[…]</p><p>曲线<br>常见动画曲线的集合。[…]</p><p>CurveTween<br>通过给定曲线转换给定动画的值。[…]</p><p>CustomClipper &lt; T &gt;<br>用于提供自定义剪辑的界面。[…]</p><p>CustomMultiChildLayout<br>一个widget，它使用委托来调整和定位多个子节点。[…]</p><p>CustomPaint的<br>一个widget，提供在绘制阶段绘制的画布。[…]</p><p>CustomPainter<br>所用的接口CustomPaint的（在部件库）和 RenderCustomPaint（在绘制库）。[…]</p><p>CustomPainterSemantics<br>包含描述由CustomPaint使用的Canvas包含的矩形中绘制的信息的属性。[…]</p><p>CustomScrollView<br>一个滚动型创建使用棉条自定义滚动效果。[…]</p><p>CustomSingleChildLayout<br>一个widget，将其单个子级的布局推迟到委托。[…]</p><p>DecoratedBox<br>在儿童绘画之前或之后 绘制装饰的widget。[…]</p><p>DecoratedBoxTransition<br>动画版的DecoratedBox是其动画的不同属性装饰。[…]</p><p>装饰<br>盒子装饰（应用于Rect的装饰）的描述。[…]</p><p>DecorationImage<br>箱子装饰的图象。[…]</p><p>DecorationImagePainter<br>装饰图像 的画家。[…]</p><p>DecorationTween<br>两个装饰之间的插值。[…]</p><p>DefaultAssetBundle<br>一个widget，用于确定其后代的默认资产包。[…]</p><p>DefaultTextStyle<br>要应用于后代Text widget而没有显式样式的文本样式。</p><p>DefaultWidgetsLocalizations<br>widget库的美国英语本地化版本。[…]</p><p>方向性<br>用于确定文本和文本方向敏感渲染对象的环境方向性的窗口widget。[…]</p><p>可取消<br>可以通过在指示的方向上拖动来解除的widget。[…]</p><p>DragDownDetails<br>使用GestureDragDownCallback的回调的详细信息对象。[…]</p><p>DragEndDetails<br>使用GestureDragEndCallback的回调的详细信息对象。[…]</p><p>可拖动&lt; T &gt;<br>可以拖动到DragTarget的窗口widget。[…]</p><p>DragScrollActivity<br>滚动视图在用户在屏幕上拖动手指时执行的活动。[…]</p><p>DragStartDetails<br>使用GestureDragStartCallback的回调的详细信息对象。[…]</p><p>DragTarget &lt; T &gt;<br>删除Draggable widget 时接收数据的widget。[…]</p><p>DragUpdateDetails<br>使用GestureDragUpdateCallback的回调的详细信息对象。[…]</p><p>DrivenScrollActivity<br>基于动画参数设置动画滚动视图的活动。[…]</p><p>EdgeInsets<br>四个基本方向中每个方向的一组不可变的偏移量。[…]</p><p>EdgeInsetsDirectional<br>四个基本方向中的每个方向上的不可变的偏移集，但其水平分量取决于书写方向。[…]</p><p>EdgeInsetsGeometry<br>EdgeInsets的 基类，允许文本方向感知分辨率。[…]</p><p>EdgeInsetsGeometryTween<br>两个EdgeInsetsGeometry之间的插值。[…]</p><p>EdgeInsetsTween<br>两个EdgeInsets之间的插值。[…]</p><p>EditableText<br>基本文本输入字段。[…]</p><p>EditableTextState<br>声明EditableText的状态。</p><p>ElasticInCurve<br>振荡曲线，在超出其范围的同时增大幅度。[…]</p><p>ElasticInOutCurve<br>一条振荡曲线，在超出其范围时会增大然后收缩。[…]</p><p>ElasticOutCurve<br>一条振荡曲线，在超出其范围时会缩小幅度。[…]</p><p>元件<br>树中特定位置 的Widget实例化。[…]</p><p>ErrorWidget<br>呈现异常消息的widget。[…]</p><p>ExactAssetImage<br>从AssetBundle获取图像，将其与给定比例相关联。[…]</p><p>ExcludeSemantics<br>删除其后代的所有语义的widget。[…]</p><p>扩展<br>一个使Row，Column或Flex的子控件扩展尺寸的控件。[…]</p><p>FadeInImage<br>在加载目标图像时显示占位符图像的图像，然后在加载时淡入新图像。[…]</p><p>FadeTransition<br>动画widget的不透明度。[…]</p><p>FileImage<br>将给定的File对象解码为图像，将其与给定的比例相关联。[…]</p><p>FittedBox<br>秤，并根据自身内部定位其子契合。[…]</p><p>FittedSizes<br>applyBoxFit 返回的这对大小。</p><p>FixedColumnWidth<br>将列的大小调整为特定数量的像素。[…]</p><p>FixedExtentMetrics<br>ScrollPosition到具有固定项目大小的滚动视图的 度量标准。[…]</p><p>FixedExtentScrollController<br>用于滚动视图的控制器，其项目具有相同的大小。[…]</p><p>FixedExtentScrollPhysics<br>一种捕捉物理，它总是直接落在物品上而不是滚动范围内的任何地方。[…]</p><p>FixedScrollMetrics<br>与Scrollable视口关联的值的不可变快照。[…]</p><p>柔性<br>在一维数组中显示其子项的窗口widget。[…]</p><p>FlexColumnWidth<br>在布置了所有其他列之后，通过占用剩余空间的一部分来确定列的大小。[…]</p><p>灵活<br>控制行，列或Flex的子项如何弯曲的widget。[…]</p><p>FlippedCurve<br>曲线是其给定曲线的反转。[…]</p><p>流<br>根据FlowDelegate中的逻辑，可以有效地调整和定位子项的widget。[…]</p><p>FlowDelegate<br>一个控制流布局外观的委托。[…]</p><p>FlowPaintingContext<br>FlowDelegate绘制的 上下文。[…]</p><p>FlutterErrorDetails<br>提供给FlutterExceptionHandler回调的信息的类。[…]</p><p>FlutterLogoDecoration<br>关于如何绘制Flutter徽标的不可变描述。<br>的FocusManager<br>管理焦点树。[…]</p><p>FocusNode<br>焦点树中可以接收焦点的叶节点。[…]</p><p>FocusScope<br>建立一个widget可以获得焦点的范围。[…]</p><p>FocusScopeNode<br>焦点树中的内部节点。[…]</p><p>fontWeight设置<br>用于绘制文本的字形的粗细<br>形成<br>用于将多个表单字段widget（例如TextField widget）分组在一起的可选容器。[…]</p><p>FormField &lt; T &gt;<br>单个表单字段。[…]</p><p>FormFieldState &lt; T &gt;<br>FormField 的当前状态。传递给FormFieldBuilder方法，用于构造表单字段的widget。</p><p>FormState<br>与窗口widget关联的状态。[…]</p><p>FractionallySizedBox<br>一个widget，可将其子级调整为总可用空间的一小部分。有关布局算法的更多详细信息，请参阅 RenderFractionallySizedOverflowBox。[…]</p><p>FractionalOffset<br>偏移量，表示为大小的一部分。[…]</p><p>FractionalOffsetTween<br>两个小数偏移之间的插值。[…]</p><p>FractionalTranslation<br>在绘制其子项之前应用转换转换。[…]</p><p>FractionColumnWidth<br>将列的大小调整为表的约束’maxWidth的一小部分。[…]</p><p>FutureBuilder &lt; T &gt;<br>基于与Future交互的最新快照构建自己的widget。[…]</p><p>GestureDetector<br>检测手势的widget。[…]</p><p>GestureRecognizerFactory &lt; T扩展了GestureRecognizer &gt;<br>用于创建手势识别器的工厂。[…]</p><p>GestureRecognizerFactoryWithHandlers &lt; T扩展了GestureRecognizer &gt;<br>工厂用于创建委托给回调的手势识别器。[…]</p><p>GlobalKey &lt; Ť延伸国&lt; StatefulWidget &gt; &gt;<br>整个应用程序中唯一的密钥。[…]</p><p>GlobalObjectKey &lt; Ť延伸国&lt; StatefulWidget &gt; &gt;<br>一个全局键，从用作其值的对象获取其标识。[…]</p><p>GlowingOverscrollIndicator<br>滚动视图已过度滚动的可视指示。[…]</p><p>梯度<br>2D渐变。[…]</p><p>GridPaper<br>一个widget，用于绘制一个像素宽的直线网格。[…]</p><p>网格视图<br>可滚动的2Dwidget数组。[…]</p><p>英雄<br>一个widget，标记其子级为英雄动画的候选者。[…]</p><p>HeroController<br>一个导航观察者管理英雄的转变。[…]</p><p>HoldScrollActivity<br>滚动活动，除了可以释放以恢复正常的空闲行为之外什么也不做。[…]</p><p>HSVColor<br>使用alpha，hue，饱和度和值表示的颜色。[…]</p><p>图标<br>图形图标插件与来自于所述的字体的字形绘制IconData如材料的预定IconData以s 图标。[…]</p><p>IconData<br>字体标志符号表示的图标说明。[…]</p><p>IconTheme<br>控制窗口widget子树中图标的默认颜色，不透明度和大小。[…]</p><p>IconThemeData<br>定义图标的颜色，不透明度和大小。[…]</p><p>IdleScrollActivity<br>滚动活动，什么都不做。[…]</p><p>IgnorePointer<br>在命中测试期间不可见的widget。[…]</p><p>图片<br>显示图像的widget。[…]</p><p>ImageCache<br>类为imageCache对象。[…]</p><p>ImageConfiguration<br>传递给ImageProvider.resolve方法的配置信息，用于选择特定图像。[…]</p><p>的ImageIcon<br>来自ImageProvider的图标，例如AssetImage。[…]</p><p>的imageinfo<br>一个dart：ui.Image对象及其对应的比例。[…]</p><p>ImageProvider &lt; T &gt;<br>识别图像而不提交精确的最终资产。这允许识别一组图像，并且稍后基于环境（例如，设备像素比）来解析精确图像。[…]</p><p>ImageShader<br>用于平铺图像的着色器（由Paint.shader使用）。</p><p>的ImageStream<br>图像资源的句柄。[…]</p><p>ImageStreamCompleter<br>用于管理dart加载的基类：用于ImageStream的ui.Image对象 。[…]</p><p>ImplicitlyAnimatedWidget<br>用于构建窗口widget的抽象窗口widget，可在一段时间内逐渐更改其值。[…]</p><p>IndexedStack<br>一个堆栈，显示来自子项列表的单个子项。[…]</p><p>InheritedElement<br>使用InheritedWidget作为其配置 的Element。</p><p>InheritedWidget<br>widget的基类，可以有效地在树中传播信息。[…]</p><p>InspectorSelection<br>检查员的可变选择状态。<br>间隔<br>曲线直到开始为0.0 ，然后弯曲（根据曲线从0.0到1.0 结束，然后是1.0。[…]</p><p>IntrinsicColumnWidth<br>根据该列中所有单元格的固有尺寸确定列的大小。[…]</p><p>IntrinsicHeight<br>一个widget，可以将其子级调整为子级的内在高度。[…]</p><p>IntrinsicWidth<br>一个widget，可以将其子级调整为子级的内部宽度。[…]</p><p>IntTween<br>两个整数之间的插值。[…]</p><p>活着<br>标记一个child需要保持活着，即使它在一个懒惰的列表中，否则将删除它。[…]</p><p>KeepAliveHandle<br>甲收听其可以手动触发。[…]</p><p>KeepAliveNotification<br>指示此通知气泡必须保持活动的子树，即使它通常会作为优化被丢弃。[…]</p><p>键<br>Key是Widget，Element和SemanticsNode的标识符[…]</p><p>KeyedSubtree<br>构建其子项的widget。[…]</p><p>LabeledGlobalKey &lt; Ť延伸国&lt; StatefulWidget &gt; &gt;<br>带调试标签的全局密钥。[…]</p><p>LayerLink<br>LeaderLayer可以注册 的对象。[…]</p><p>LayoutBuilder<br>构建可依赖于父窗口widget大小的窗口widget树。[…]</p><p>LayoutChangedNotification<br>指示接收此通知的对象的其中一个后代的布局已经以某种方式更改，因此关于该布局的任何假设都不再有效。[…]</p><p>LayoutId<br>用于标识CustomMultiChildLayout中的子项的元数据。[…]</p><p>LeafRenderObjectElement<br>使用LeafRenderObjectWidget作为其配置 的Element。</p><p>LeafRenderObjectWidget<br>RenderObjectWidgets的超类，用于配置没有子项的RenderObject子类。</p><p>LimitedBox<br>只有当它不受约束时才限制其大小的盒子。[…]</p><p>的LinearGradient<br>2D线性渐变。[…]</p><p>ListBody<br>一个widget，它沿着给定的轴顺序排列它的子节点，强制它们到另一个轴的父节点的维度。[…]</p><p>可听<br>维护侦听器列表的对象。</p><p>倾听者<br>一个widget，它响应指针事件调用回调。[…]</p><p>列表显示<br>可线性排列的widget可滚动列表。[…]</p><p>ListWheelScrollView<br>一个盒子，可以滚动轮子上的child。[…]</p><p>ListWheelViewport<br>显示轮子上的子集子集的视口。[…]</p><p>语言环境<br>用于选择用户语言和格式首选项的标识符，由语言和国家/地区组成。这是BCP 47定义的区域设置标识符的子集。[…]</p><p>LocalHistoryEntry</p><p>LocalHistoryRoute 历史记录中的条目。</p><p>LocalHistoryRoute &lt; T &gt;<br>可以通过弹出列表在内部处理返回导航的路由。[…]</p><p>本地化<br>为其 定义区域设置child以及子项所依赖的本地化资源。[…]</p><p>LocalizationsDelegate &lt; T &gt;<br>用于一组本地化资源类型的工厂，T由Localizationswidget加载 。[…]</p><p>LocalKey<br>不是GlobalKey的关键[…]</p><p>LongPressDraggable &lt; T &gt;<br>从长按开始使其child可以拖拽。</p><p>MaskFilter<br>一个蒙版过滤器，用于在绘制时应用于形状。掩码过滤器是一种采用彩色像素位图的函数，并返回另一个彩色像素位图。[…]</p><p>Matrix4<br>4D矩阵。值以列主要顺序存储。</p><p>Matrix4Tween<br>两个Matrix4之间的插值。[…]</p><p>MatrixUtils<br>用于处理矩阵的实用程序函数。</p><p>MaxColumnWidth<br>确定列的大小，使其大小为两个列宽规范的最大值。[…]</p><p>MediaQuery<br>建立媒体查询解析给定数据的子树。[…]</p><p>MediaQueryData<br>有关介质的信息（例如，窗口）。[…]</p><p>MemoryImage<br>将给定的Uint8List缓冲区解码为图像，将其与给定的比例相关联。[…]</p><p>MergeSemantics<br>一个widget，它合并其后代的语义。[…]</p><p>元数据<br>在渲染树中保存不透明的元数据。[…]</p><p>MinColumnWidth<br>确定列的大小，使其大小为两个列宽规范中的最小值。[…]</p><p>ModalBarrier<br>一个widget，阻止用户与自身后面的widget交互。[…]</p><p>ModalRoute &lt; T &gt;<br>阻止与先前路由交互的路由。[…]</p><p>MultiChildLayoutDelegate<br>一个控制多个子项布局的委托。[…]</p><p>MultiChildRenderObjectElement<br>使用MultiChildRenderObjectWidget作为其配置 的Element。[…]</p><p>MultiChildRenderObjectWidget</p><p>RenderObjectWidgets的超类，用于配置具有单个子项列表的RenderObject子类。（此超类仅为该子列表提供存储，它实际上不提供更新逻辑。）</p><p>MultiFrameImageStreamCompleter<br>管理图像帧的解码和调度。[…]</p><p>NavigationToolbar<br>NavigationToolbar是一个布局助手，用于沿水平轴定位3个widget或widget组，这对于应用程序的导航栏是合理的，例如在Material Design和iOS中。[…]</p><p>航海家<br>一个widget，用于管理具有堆栈规则的一组子widget。[…]</p><p>NavigatorObserver<br>用于观察导航器行为的界面。</p><p>NavigatorState<br>Navigator widget 的状态。</p><p>NestedScrollView<br>其中的滚动视图可以嵌套其他滚动视图，其滚动位置本质上是链接的。[…]</p><p>NestedScrollViewViewport<br>NestedScrollView使用 的Viewport变体。[…]</p><p>NetworkImage<br>从网络获取给定的URL，将其与给定的比例相关联。[…]</p><p>NeverScrollableScrollPhysics<br>滚动物理，不允许用户滚动。[…]</p><p>通知<br>可以冒泡widget树的通知。[…]<br>NotificationListener &lt; T extends Notification &gt;<br>一个widget，用于侦听通知冒泡树。[…]<br>ObjectKey<br>从用作其值的对象获取其标识的键。[…]<br>抵消<br>不可变的2D浮点偏移量。[…]<br>台下<br>一个widget，它将child放在树中，但没有绘制任何东西，没有让child可用于命中测试，也没有占用父母的任何空间。[…]</p><p>OneFrameImageStreamCompleter<br>管理dart：ui.Image对象的加载，用于静态ImageStream（只有一帧）。</p><p>不透明度<br>使子项部分透明的widget。[…]</p><p>OrientationBuilder<br>构建可依赖于父窗口widget方向的窗口widget树（与设备方向不同）。[…]</p><p>OverflowBox<br>一个widget，它对子进程施加的约束不同于从其父进程获得的约束，可能允许子进程溢出父进程。[…]</p><p>覆盖<br>一个堆栈条目可以独立进行管理。[…]</p><p>OverlayEntry<br>在一个地方叠加，可以包含一个widget。[…]</p><p>OverlayRoute &lt; T &gt;<br>在导航器的叠加层中显示窗口widget的路径。</p><p>OverlayState<br>Overlay 的当前状态。[…]</p><p>OverscrollIndicatorNotification<br>GlowingOverscrollIndicator将开始显示过度滚动指示的 通知。[…]</p><p>OverscrollNotification<br>通知Scrollable widget未更改其滚动位置，因为更改会导致其滚动位置超出其滚动边界。[…]</p><p>填充<br>一个widget，通过给定的填充来保护其子级。[…]</p><p>的PageController<br>PageView 的控制器。[…]</p><p>PageMetrics<br>PageView的 度量标准。[…]</p><p>PageRoute &lt; T &gt;<br>替换整个屏幕的模态路线。</p><p>PageRouteBuilder &lt; T &gt;<br>用于根据回调定义一次性页面路由的实用程序类。[…]</p><p>PageScrollPhysics<br>滚动由使用物理浏览量。[…]</p><p>PageStorage<br>为此窗口widget子树建立页面存储桶的窗口widget。</p><p>PageStorageBucket<br>与应用中的页面关联的存储桶。[…]</p><p>PageStorageKey &lt; T &gt;<br>一个ValueKey用于定义PageStorage值将被保存。[…]</p><p>页面预览<br>可逐页工作的可滚动列表。[…]</p><p>涂料<br>在画布上绘制时使用的样式的说明。[…]</p><p>PaintingBinding<br>绑定绘画库。[…]</p><p>PaintingContext<br>一个画画的地方。[…]</p><p>ParentDataElement &lt; T扩展RenderObjectWidget &gt;<br>使用ParentDataWidget作为其配置 的Element。</p><p>ParentDataWidget &lt; T扩展RenderObjectWidget &gt;<br>将ParentData信息挂接到RenderObjectWidget的子 节点的widget的基类。[…]</p><p>路径<br>平面的复杂一维子集。[…]</p><p>PerformanceOverlay<br>显示性能统计信息 […]</p><p>PhysicalModel<br>表示将其子项剪辑为形状的物理层的窗口widget。[…]</p><p>PhysicalShape<br>一个widget，表示将其子级剪辑为路径的物理层。[…]</p><p>占位符<br>一个widget，用于绘制一个框，表示有一天会添加其他widget的位置。[…]</p><p>PointerCancelEvent<br>指针的输入不再指向此接收器。</p><p>PointerDownEvent<br>指针已与设备联系。</p><p>PointerEvent<br>触摸，手写笔或鼠标事件的基类。[…]</p><p>PointerMoveEvent<br>当指针与设备接触时，指针相对于设备移动。[…]</p><p>PointerUpEvent<br>指针已停止与设备联系。</p><p>PopupRoute &lt; T &gt;<br>在当前路线上覆盖窗口widget的模态路径。</p><p>定位<br>一个控件，用于控制堆栈子项的位置。[…]</p><p>PositionedDirectional<br>一个widget，用于控制堆栈子项的位置，而不需要提交特定的TextDirection。[…]</p><p>PositionedTransition<br>定位的 动画版本，它采用特定的 动画在动画的生命周期内将child的位置从起始位置转换到结束位置。[…]</p><p>PREFERREDSIZE<br>具有首选大小的widget。[…]</p><p>PreferredSizeWidget<br>窗口widget的接口，如果不受约束，则可以返回此窗口widget所希望的大小。[…]</p><p>PrimaryScrollController<br>将ScrollController与子树关联。[…]</p><p>ProxyAnimation<br>作为另一个动画的代理的动画。[…]</p><p>ProxyElement<br>使用ProxyWidget作为其配置 的Element。</p><p>ProxyWidget<br>提供了子窗口widget的窗口widget，而不是构建新窗口widget。[…]</p><p>的RadialGradient<br>2D径向渐变。[…]</p><p>半径<br>圆形或椭圆形的半径。</p><p>RawGestureDetector<br>一个widget，用于检测给定手势工厂描述的手势。[…]</p><p>RawGestureDetectorState<br>国家对RawGestureDetector。</p><p>RawImage<br>一个直接显示dart：ui.Image的widget。[…]</p><p>RawKeyboardListener<br>每当用户按下或释放键盘上的键时调用回调的widget。[…]</p><p>RawKeyEvent<br>原始密钥事件的基类。[…]</p><p>矩形<br>一个不可变的，2D，轴对齐的浮点矩形，其坐标相对于给定的原点。[…]</p><p>RectTween<br>两个矩形之间的插值。[…]</p><p>RelativePositionedTransition<br>Positioned的 动画版本，它根据相对于具有指定大小的边界框的rect值转换子项的位置。[…]</p><p>RelativeRect<br>一个不可变的2D，轴对齐的浮点矩形，其坐标相对于另一个矩形的边缘给出，称为容器。由于矩形的尺寸是相对于容器的尺寸，因此该类没有宽度和高度成员。为了确定矩形的宽度或高度，将其转换为一个矩形使用toRect（） （通过容器本身的矩形），然后检查该对象。[…]</p><p>RelativeRectTween<br>两个相对rects之间的插值。[…]</p><p>RenderBox<br>2D笛卡尔坐标系中的渲染对象。[…]</p><p>RenderNestedScrollViewViewport<br>NestedScrollView使用 的RenderViewport变体。[…]</p><p>渲染对象<br>渲染树中的对象。[…]</p><p>RenderObjectElement<br>使用RenderObjectWidget作为其配置 的Element。[…]</p><p>RenderObjectToWidgetAdapter &lt; T扩展RenderObject &gt;<br>从RenderObject到Element树的桥梁。[…]</p><p>RenderObjectToWidgetElement &lt; T扩展RenderObject &gt;<br>由RenderObject托管的RootRenderObjectElement。[…]</p><p>RenderObjectWidget<br>RenderObjectWidgets提供用于配置RenderObjectElement s，这涡卷渲染对象 s，这提供了应用程序的实际渲染。</p><p>RenderSliv​​erOverlapAbsorber<br>包裹另一个的条子，迫使其布局范围被视为重叠。[…]</p><p>RenderSliv​​erOverlapInjector<br>基于存储在SliverOverlapAbsorberHandle中的值具有条子几何形状的条子 。[…]</p><p>RepaintBoundary<br>一个widget，为其子级创建单独的显示列表。[…]</p><p>ReverseAnimation<br>与另一个动画相反的动画。[…]</p><p>ReverseTween &lt; T &gt;<br>一个Tween，反向评估其父级。</p><p>富文本<br>一段富文本。[…]</p><p>RootRenderObjectElement<br>树根处的元素。[…]</p><p>RotatedBox<br>一个widget，可以将其子项旋转整数个四分之一圈。[…]</p><p>RotationTransition<br>动画widget的旋转。</p><p>RoundedRectangleBorder<br>带圆角的矩形边框。[…]</p><p>路线&lt; T &gt;<br>由导航器管理的条目的抽象。[…]<br>RouteAware<br>知道其当前Route的对象的接口。[…]<br>RouteObserver &lt; R extends Route &gt;<br>一个导航观察者通知RouteAware变化s到他们的状态路线。[…]<br>RouteSettings<br>可能在构建路径时有用的数据。<br>行<br>使子控件横向排列显示的控件。[…]<br>RRect<br>一个不可变的圆角矩形，具有所有四个角的自定义半径。<br>RSTransform<br>由平移，旋转和均匀比例组成的变换。[…]<br>SafeArea<br>一个widget，通过足够的填充来保护其子级，以避免操作系统的入侵。[…]<br>锯齿<br>锯齿曲线，在单位间隔内重复给定次数。[…]</p><p>ScaleEndDetails<br>有关GestureScaleEndCallback的详细信息。</p><p>ScaleStartDetails<br>有关GestureScaleStartCallback的详细信息。</p><p>ScaleTransition<br>动画转换widget的比例。</p><p>ScaleUpdateDetails<br>有关GestureScaleUpdateCallback的详细信息。</p><p>滚动<br>滚动的widget。[…]</p><p>ScrollableState<br>Scrollable widget的 State对象。[…]</p><p>ScrollActivity<br>用于滚动活动（如拖动和投掷）的基类。[…]</p><p>ScrollActivityDelegate<br>ScrollActivity 的后端。[…]</p><p>ScrollbarPainter<br>用于绘制滚动条 的CustomPainter。[…]</p><p>ScrollBehavior<br>描述可滚动窗口widget的行为方式。[…]</p><p>ScrollConfiguration<br>控制可滚动窗口widget在子树中的行为方式。[…]</p><p>ScrollContext<br>Scrollable widget实现 的接口，以便使用 ScrollPosition。[…]</p><p>ScrollController<br>控制可滚动的widget。[…]</p><p>ScrollDragController<br>当用户在屏幕上拖动手指时滚动滚动视图。[…]</p><p>ScrollEndNotification<br>Scrollable widget已停止滚动的 通知。[…]</p><p>ScrollHoldController<br>用于保持Scrollable静止的接口。[…]</p><p>ScrollMetrics<br>Scrollable内容的 描述，用于建模视口的状态。[…]</p><p>ScrollNotification<br>与滚动相关 的通知。[…]</p><p>ScrollPhysics<br>确定Scrollable widget的物理特性。[…]</p><p>的scrollPosition<br>确定滚动视图中可见的内容部分。[…]</p><p>ScrollPositionWithSingleContext<br>滚动位置，用于管理单个ScrollContext的滚动活动 。[…]</p><p>ScrollSpringSimulation<br>一个SpringSimulation，其中x的值保证在模拟isDone（）时具有完全最终值。</p><p>ScrollStartNotification<br>Scrollable widget已开始滚动的 通知。[…]</p><p>ScrollUpdateNotification<br>Scrollable widget已更改其滚动位置的 通知。[…]</p><p>滚动型<br>滚动的widget。[…]</p><p>语义<br>一个widget，用widget含义的描述来注释widget树。[…]</p><p>SemanticsDebugger<br>一个可视化child语义的widget。[…]</p><p>着色器<br>Gradient和ImageShader 等对象的基类，它们对应于Paint.shader使用的着色器。</p><p>ShaderMask<br>一个widget，它将Shader生成的遮罩应用于其子级。[…]</p><p>ShapeBorder<br>形状轮廓的基类。[…]</p><p>ShapeDecoration<br>关于如何绘制任意形状的不可变描述。[…]</p><p>ShrinkWrappingViewport<br>内部较大的widget，收缩包装在主轴上的子项。[…]</p><p>模拟<br>所有模拟的基类。[…]</p><p>SingleChildLayoutDelegate<br>用于计算具有单个子项的渲染对象的布局的委托。[…]</p><p>SingleChildRenderObjectElement<br>使用SingleChildRenderObjectWidget作为其配置 的Element。[…]</p><p>SingleChildRenderObjectWidget<br>RenderObjectWidgets的超类，用于配置具有单个子槽的RenderObject子类。（此超类仅为该子级提供存储，它实际上不提供更新逻辑。）</p><p>SingleChildScrollView<br>可以滚动单个窗口widget的框。[…]</p><p>SingleTickerProviderStateMixin &lt; T扩展StatefulWidget &gt;<br>提供单个Ticker，配置为仅在启用当前树时打勾，如TickerMode所定义。[…]</p><p>尺寸<br>保持2D浮点大小。[…]</p><p>SizeChangedLayoutNotification<br>指示接收此通知的对象的其中一个后代的大小已更改，因此有关该布局的任何假设都不再有效。[…]</p><p>SizeChangedLayoutNotifier<br>一个widget， 当其子级的布局维度发生更改时自动调度SizeChangedLayoutNotification。[…]<br>SizedBox</p><p>具有指定大小的框。[…]</p><p>SizedOverflowBox<br>一个特定大小的窗口widget，但将其原始约束传递给其子节点，然后可能会溢出。[…]</p><p>SizeTransition<br>动画自己的大小和剪辑并对齐child。[…]</p><p>SizeTween<br>两种尺寸之间的插值。[…]</p><p>SlideTransition<br>动画widget相对于其正常位置的位置。[…]</p><p>SliverChildBuilderDelegate<br>使用构建器回调为子项提供子项的委托。[…]</p><p>SliverChildDelegate<br>为儿童提供条子的代表。[…]</p><p>SliverChildListDelegate<br>使用明确列表为儿童提供儿童的代表。[…]</p><p>SliverFillRemaining<br>包含单个框子项的条子，填充视口中的剩余空间。[…]</p><p>SliverFillViewport<br>包含多个子框的子条，每个子框填充视口。[…]</p><p>SliverFixedExtentList<br>将多个具有相同主轴范围的盒子项放置在线性阵列中的条子。[…]</p><p>SliverGrid<br>将多个盒子儿童放置在二维排列中的条子。[…]</p><p>SliverGridDelegate<br>控制网格中图块的布局。[…]</p><p>SliverGridDelegateWithFixedCrossAxisCount<br>创建横轴中具有固定数量的切片的网格布局。[…]</p><p>SliverGridDelegateWithMaxCrossAxisExtent<br>使用每个都具有最大横轴范围的切片创建网格布局。[…]</p><p>SliverList<br>沿着主轴将多个盒子放置在线性阵列中的条子。[…]</p><p>SliverMultiBoxAdaptorElement<br>一个懒惰地为SliverMultiBoxAdaptorWidget构建子元素的元素。[…]</p><p>SliverMultiBoxAdaptorWidget<br>条子的基类，有多个盒子元素。[…]</p><p>SliverOverlapAbsorber<br>包裹另一个的条子，迫使其布局范围被视为重叠。[…]</p><p>SliverOverlapAbsorberHandle<br>提供给SliverOverlapAbsorber，SliverOverlapInjector和NestedScrollViewViewport的句柄，用于在NestedScrollView中移位重叠。[…]</p><p>SliverOverlapInjector<br>基于存储在SliverOverlapAbsorberHandle中的值具有条子几何形状的条子 。[…]</p><p>SliverPadding<br>在另一条棉条的每一侧都应用衬垫的条子。[…]</p><p>SliverPersistentHeader<br>当条子滚动到视口的前缘时，尺寸​​变化的条子。[…]</p><p>SliverPersistentHeaderDelegate<br>委派配置SliverPersistentHeader。</p><p>SliverPrototypeExtentList<br>将盒子放置在线性阵列中并将它们限制为沿主轴具有与原型项相同程度的条子。[…]</p><p>SliverSafeArea<br>通过足够的填充来插入另一条条子的条子，以避免操作系统的入侵。[…]</p><p>SliverToBoxAdapter<br>包含单个框widget的条子。[…]<br>堆<br>一个widget，用于将其子级相对于其框的边缘定位。[…]</p><p>StadiumBorder<br>一个边框，适合体育场形状的边框（两端有半圆形的框），适用于它所应用的widget的矩形。[…]</p><p>State &lt; T扩展StatefulWidget &gt;<br>StatefulWidget 的逻辑和内部状态。[…]</p><p>StatefulBuilder<br>一个柏拉图窗口widget，它们都具有状态并调用闭包来获取其子窗口widget。[…]</p><p>StatefulElement<br>使用StatefulWidget作为其配置 的Element。</p><p>StatefulWidget<br>具有可变状态的widget。[…]</p><p>StatelessElement<br>使用StatelessWidget作为其配置 的Element。</p><p>StatelessWidget<br>一个不需要可变状态的widget。[…]</p><p>StatusTransitionWidget<br>在给定动画更改状态时重建的窗口widget。</p><p>StepTween<br>地板之间的两个整数之间的插值。[…]</p><p>StreamBuilder &lt; T &gt;<br>基于与Stream交互的最新快照构建自身的小组件。[…]</p><p>StreamBuilderBase &lt; T，S &gt;<br>基于与指定Stream的交互构建自己的widget的基类。[…]</p><p>表<br>为其子项使用表布局算法的窗口widget。[…]</p><p>表格边框<br>表格widget的 边框规范。[…]</p><p>TableCell的<br>一个widget，用于控制表的子节点的对齐方式。[…]</p><p>TableColumnWidth<br>用于描述RenderTable中列的宽度的基类。[…]</p><p>的TableRow<br>表 中的一组水平单元格。[…]</p><p>TapDownDetails<br>有关GestureTapDownCallback的详细信息，例如位置。</p><p>TapUpDetails<br>有关GestureTapUpCallback的详细信息，例如位置。</p><p>文本<br>一系列具有单一样式的文本。[…]</p><p>文本框<br>包含一段文本的矩形。[…]</p><p>TextDecoration<br>在文本附近绘制的线性装饰。</p><p>TextEditingController<br>用于可编辑文本字段的控制器。[…]</p><p>TextEditingValue<br>用于编辑文本行的当前文本，选择和撰写状态。</p><p>TextInputType<br>要优化文本输入控件的信息类型。[…]</p><p>TextPainter<br>将TextSpan树绘制到Canvas中的对象。[…]</p><p>TextPosition<br>文本字符串中的视觉位置。</p><p>的TextRange<br>一串文本中的一系列字符。</p><p>TextSelection<br>表示选择的一系列文本。</p><p>TextSelectionControls<br>用于构建选择UI的界面，由工具栏widget的实现者提供。[…]</p><p>TextSelectionDelegate<br>用于操作选择的界面，供工具栏widget的实现者使用。</p><p>TextSelectionOverlay<br>管理一对文本选择句柄的对象。[…]</p><p>TextSpan<br>不可变的文本范围。[…]</p><p>文字样式<br>一种不可变的样式，其中绘制文本。[…]</p><p>TextStyleTween<br>两个TextStyle之间的插值。[…]</p><p>质地<br>一个矩形，后端纹理映射在该矩形上。[…]</p><p>阈<br>曲线为0.0，直到达到阈值，然后跳到1.0。[…]</p><p>TickerFuture<br>表示正在进行的Ticker序列的对象。[…]</p><p>TickerMode<br>启用或禁用窗口widget子树中的代码（以及动画控制器）。[…]</p><p>TickerProvider<br>由可以销售Ticker对象的类实现的接口。[…]</p><p>TickerProviderStateMixin &lt; T扩展StatefulWidget &gt;<br>提供Ticker对象，这些对象配置为仅在启用当前树时打勾，如TickerMode所定义。[…]</p><p>标题<br>在操作系统中描述此应用程序的widget。</p><p>公差<br>指定距离，持续时间和速度差异的最大允许幅度的结构被认为是相等的。</p><p>TrackingScrollController<br>一个ScrollController，其initialScrollOffset跟踪其最近更新的ScrollPosition。[…]</p><p>TrainHoppingAnimation<br>此动画通过代理一个动画开始，但可以给出第二个动画。当他们的时间交叉时（或者因为第二个是相反的方向，或者因为一个超过另一个），动画会跳到代理第二个动画，第二个动画成为新的“第一”动画。[…]</p><p>转变<br>在绘制其子项之前应用转换的窗口widget。[…]</p><p>TransformProperty<br>处理表示变换的Matrix4的属性。</p><p>TransitionRoute &lt; T &gt;<br>具有入口和出口过渡的路线。</p><p>Tween &lt; T扩展动态 &gt;<br>开始值和结束值之间的线性插值。[…]</p><p>TypeMatcher &lt; T &gt;<br>此类是“is”运算符的解决方法，它不接受变量值作为其右操作数</p><p>UnconstrainedBox<br>一个widget，它对子节点没有约束，允许它以“自然”大小呈现。[…]</p><p>唯一键<br>一个只与自己相等的关键。</p><p>UniqueWidget &lt; Ť延伸国&lt; StatefulWidget &gt; &gt;<br>有状态窗口widget的基类，它在树中只有一个膨胀的实例。[…]</p><p>UserScrollNotification<br>用户已更改滚动方向的通知。[…]</p><p>ValueKey &lt; T &gt;<br>使用特定类型的值来标识自身的钥匙。[…]</p><p>ValueNotifier &lt; T &gt;<br>甲ChangeNotifier保存单个值。[…]</p><p>速度<br>二维速度。</p><p>视口<br>内部更大的widget。[…]</p><p>ViewportNotificationMixin<br>Mixin for Notification用于跟踪他们已经通过的RenderAbstractViewport的数量。[…]</p><p>窗口widget<br>用于描述元素的配置[…]</p><p>WidgetInspector<br>一个widget，可以检查子widget的结构。[…]</p><p>WidgetInspectorService<br>GUI工具用于与WidgetInspector交互的服务。[…]</p><p>WidgetsApp<br>一个便利类，它包含了应用程序通常需要的许多widget。[…]</p><p>WidgetsBinding<br>widget层和Flutter引擎之间的粘合剂。</p><p>WidgetsBindingObserver<br>使用Widgets图层绑定注册的类的接口。[…]</p><p>WidgetsFlutterBinding<br>基于Widgets框架的应用程序的具体绑定。这是将框架绑定到Flutter引擎的粘合剂。</p><p>WidgetsLocalizations<br>用于最低级别的Flutter框架的本地化资源值的接口。[…]</p><p>WidgetToRenderBoxAdapter<br>用于在窗口widget树中放置特定RenderBox的适配器。[…]</p><p>WillPopScope<br>注册回调以否决用户尝试解除封闭的 ModalRoute。[…]</p><p>包<br>一个widget，以多个水平或垂直运行方式显示其子项。[…]</p><p>常量<br>kAlwaysCompleteAnimation →const 动画&lt; double &gt;<br>一个总是完整的动画。[…]</p><p>const _AlwaysCompleteAnimation()<br>kAlwaysDismissedAnimation →const 动画&lt; double &gt;<br>一个总是被解雇的动画。[…]<br>const _AlwaysDismissedAnimation()</p><p>属性<br>debugHighlightDeprecatedWidgets ↔ 布尔<br>显示已弃用的widget的横幅。</p><p>读/写<br>debugPrint ↔ DebugPrintCallback<br>将消息打印到控制台，您可以使用“flutter”工具的“logs”命令（“flutter logs”）访问该控制台。[…]</p><p>读/写<br>debugPrintBuildScope ↔ 布尔<br>记录所有来电BuildOwner.buildScope。[…]</p><p>读/写<br>debugPrintGlobalKeyedWidgetLifecycle ↔ 布尔<br>在取消激活具有全局键的窗口widget时记录，并在重新激活（重新记录）时记录。[…]</p><p>读/写<br>debugPrintRebuildDirtyWidgets ↔ 布尔<br>记录每帧构建的脏widget。[…]</p><p>读/写<br>debugPrintScheduleBuildForStacks ↔ 布尔<br>记录将widget标记为需要重建的调用堆栈。[…]</p><p>读/写<br>debugProfileBuildsEnabled ↔ 布尔<br>Timeline为每个构建的Widget 添加事件。[…]<br>读/写<br>imageCache → ImageCache<br>实现Flutter框架图像缓存的单例。[…]</p><p>只读<br>函数<br>applyBoxFit（BoxFit fit， Size inputSize， Size outputSize） → FittedSizes<br>应用BoxFit值。[…]</p><p>axisDirectionIsReversed（AxisDirection axisDirection） → bool<br>返回沿给定轴方向行进是否以数字递减顺序访问沿该轴的坐标。[…]</p><p>axisDirectionToAxis（AxisDirection axisDirection） → 轴<br>返回包含给定AxisDirection的Axis。[…]</p><p>createLocalImageConfiguration（BuildContext context，{ Size size }） → ImageConfiguration<br>基于给定的BuildContext（以及可选的大小） 创建ImageConfiguration。[…]</p><p>debugAssertAllWidgetVarsUnset（String reason） → bool<br>如果未更改任何窗口widget库调试变量，则返回true。[…]</p><p>debugCheckHasDirectionality（BuildContext context） → bool<br>断言给定的上下文具有Directionality祖先。[…]</p><p>debugCheckHasMediaQuery（BuildContext context） → bool<br>断言给定上下文具有MediaQuery祖先。[…]</p><p>debugCheckHasTable（BuildContext context） → bool<br>断言给定上下文具有表祖先。[…]</p><p>debugChildrenHaveDuplicateKeys（Widget parent， Iterable &lt; Widget &gt; children） → bool<br>如果给定子列表包含任何重复的非null键，则置位。[…]</p><p>debugDescribeTransform（Matrix4 transform） → List &lt; String &gt;<br>以对TransformProperty有用的格式返回表示给定转换的字符串列表。[…]</p><p>debugDumpApp（） →void<br>打印当前正在运行的应用程序的字符串表示。</p><p>debugDumpLayerTree（） →void<br>打印整个图层树的文本表示。</p><p>debugDumpRenderTree（） →void<br>打印整个渲染树的文本表示。</p><p>debugItemsHaveDuplicateKeys（Iterable &lt; Widget &gt; items） → bool<br>如果给定的项列表包含任何重复的非空键，则断言。[…]</p><p>debugPrintStack（{ String label， int maxFrames }） →void<br>使用debugPrint和 FlutterError.defaultStackFilter将当前堆栈转储到控制台。[…]</p><p>debugWidgetBuilderValue（Widget小 部件， Widget 内置） →void<br>断言built widget不为空。[…]</p><p>decodeImageFromList（Uint8List list） → Future &lt; Image &gt;<br>从字节列表创建图像。[…]</p><p>defaultScrollNotificationPredicate（ScrollNotification notification） → bool<br>一个ScrollNotificationPredicate，它检查是否 notification.depth == 0，这意味着通知没有通过任何插入的滚动widget。<br>flipAxis（轴 方向） → 轴<br>返回给定轴的反面。[…]</p><p>flipAxisDirection（AxisDirection axisDirection） → AxisDirection<br>返回给定AxisDirection的反向。[…]</p><p>getAxisDirectionFromAxisReverseAndDirectionality（BuildContext context， Axis axis， bool reverse） → AxisDirection<br>返回当前Directionality中给定Axis中 的AxisDirection（或反之，如果为true）。[…]</p><p>reverse<br>hashList（Iterable &lt; Object &gt; arguments） → int<br>将Iterable中任意数量对象 的Object.hashCode值合并为一个值。如果给定null，则此函数将返回相同的值，就像给出一个空列表一样。<br>hashValues（Object arg01， Object arg02，[ Object arg03 = _hashEnd， Object arg04 = _hashEnd， Object arg05 = _hashEnd， Object arg06 = _hashEnd， Object arg07 = _hashEnd， Object arg08 = _hashEnd， Object arg09 = _hashEnd， Object arg10 = _hashEnd， 对象 arg11 = _hashEnd， 对象 arg12 = _hashEnd， 对象 arg13 = _hashEnd， 对象 arg14 = _hashEnd， 对象 arg15 = _hashEnd， 对象 arg16 = _hashEnd， 对象 arg17 = _hashEnd， 对象 arg18 = _hashEnd， 对象 arg19 = _hashEnd， 对象 arg20 =_hashEnd ]） → int<br>将最多20个对象的哈希码组合成一个值。[…]</p><p>paintBorder（Canvas canvas， Rect rect，{ BorderSide top：BorderSide.none， BorderSide right：BorderSide.none， BorderSide bottom：BorderSide.none， BorderSide left：BorderSide.none }） →void<br>在画布上绘制给定矩形周围的边框。[…]</p><p>paintImage（{ Canvas canvas， Rect rect， Image image， ColorFilter colorFilter， BoxFit fit， Alignment alignment：Alignment.center， Rect centerSlice， ImageRepeat repeat：ImageRepeat.noRepeat， bool flipHorizo​​ntally：false }） →void<br>将图像绘制到画布上的给定矩形中。[…]</p><p>paintZigZag（画布 画布， 油漆 颜料， 偏移 开始， 偏移 结束， int zigs， 双倍 宽度） →void<br>在两点之间画一条线，在连接两点的线上对角线前后切割。[…]</p><p>positionDependentBox（{ Size size， Size childSize， Offset target， bool preferBelow， double verticalOffset：0.0， double margin：10.0 }） → Offset<br>将子框放在容器框内，位于目标点的上方或下方。[…]</p><p>precacheImage（ImageProvider 提供程序， BuildContext 上下文，{ Size size }） → Future &lt; Null &gt;<br>将图像预取到图像缓存中。[…]</p><p>runApp（widget 应用程序） →无效<br>给给定的widget充气并将其附加到屏幕上。[…]</p><p>textDirectionToAxisDirection（TextDirection textDirection） → AxisDirection<br>返回在给定TextDirection中进行读取的AxisDirection。[…]</p><p>枚举<br>AnimationStatus</p><p>动画的状态<br>AppLifecycleState<br>申请可以进入的国家。[…]</p><p>轴<br>两个方面的两个基本方向。[…]</p><p>AxisDirection<br>沿水平轴或垂直轴的方向。</p><p>BannerLocation<br>在哪里展示横幅。[…]</p><p>混合模式<br>在画布上绘画时使用的算法。[…]</p><p>BlurStyle<br>用于MaskFilter对象中模糊的样式。</p><p>边框<br>在边框中 为BorderSide绘制的线条样式。</p><p>BoxFit<br>如何将盒子刻在另一个盒子里。[…]</p><p>BoxShape<br>渲染Border或BoxDecoration时使用的形状。[…]</p><p>ConnectionState<br>与异步计算的连接状态。[…]</p><p>CrossAxisAlignment<br>如何将儿童沿横轴放置在柔性布局中。[…]</p><p>CrossFadeState<br>指定要显示的两个子项中的哪一个。请参阅AnimatedCrossFade。[…]</p><p>DecorationPosition<br>在哪里画一个盒子装饰。</p><p>DiagnosticLevel<br>用于过滤显示和省略哪些诊断的各种优先级。[…]</p><p>DismissDirection<br>可以驳回不予受理 的方向。</p><p>DragAnchor<br>凡可拖动应在拖动过程中被锚定。</p><p>FadeInImagePhase<br>FadeInImage经历 的阶段。</p><p>FilterQuality<br>图像过滤器的质量级别。[…]</p><p>FLEXFIT<br>如何将child铭刻在可用空间内。[…]</p><p>FlutterLogoStyle<br>绘制Flutter徽标的可能方法。</p><p>字体样式<br>是否在字体中倾斜字形</p><p>GrowthDirection<br>相对于滚动偏移轴，条子内容的排序方向。[…]</p><p>HitTestBehavior<br>在命中测试期间如何表现。</p><p>ImageRepeat<br>如何绘制未被图像覆盖的框的任何部分。</p><p>MainAxisAlignment<br>如何在柔性布局中沿着主轴放置子项。[…]</p><p>MainAxisSize<br>主轴应占用多少空间。[…]</p><p>方向<br>无论是纵向还是横向。</p><p>溢出<br>是否应该剪掉溢出的child，或者看到他们的溢出。</p><p>PaintingStyle<br>在画布上绘制形状和路径的策略。[…]</p><p>PathFillType<br>确定决定如何计算Path内部的缠绕规则。[…]</p><p>RenderComparison<br>两个对象之间差异的描述，在它将如何影响渲染的上下文中。[…]</p><p>RoutePopDisposition<br>指示是否应弹出当前路由。[…]</p><p>SelectionChangedCause<br>指示触发所选文本更改的内容（包括对光标位置的更改）。</p><p>StackFit<br>如何调整Stack的未定位子项的大小。[…]</p><p>StrokeCap<br>用于行结尾的样式。[…]</p><p>StrokeJoin<br>用于线连接的样式。[…]</p><p>TableCellVerticalAlignment<br>RenderTable对象中 单元格的垂直对齐选项。[…]</p><p>上投放<br>用户交互应适应目标的平台。[…]</p><p>TextAffinity<br>是否TextPosition是视觉上的上游或其偏移的下游。[…]</p><p>textAlign设置<br>是否以及如何水平对齐文本。</p><p>TextBaseline<br>用于对齐文本的水平线。</p><p>TextDecorationStyle<br>绘制文本装饰的样式</p><p>TextDirection<br>文本流动的方向。[…]</p><p>TextOverflow<br>如何处理溢出的文本。</p><p>TextSelectionHandleType<br>要显示哪种类型的选择句柄。[…]</p><p>TILEMODE<br>定义渐变边缘发生的事情。[…]</p><p>VertexMode<br>定义在绘制一组三角形时如何解释点列表。[…]</p><p>VerticalDirection<br>盒子垂直流动的方向。[…]</p><p>WrapAlignment<br>Wrap 如何对齐对象。[…]</p><p>WrapCrossAlignment<br>谁包裹应该在横轴的运行中对齐儿童。</p><p>类型定义<br>AnimatedCrossFadeBuilder（Widget topChild， Key topChildKey， Widget bottomChild， Key bottomChildKey） → Widget<br>签名AnimatedCrossFade.layoutBuilder回拨。[…]</p><p>AnimatedListItemBuilder（BuildContext context， int index， Animation &lt; double &gt; animation） → Widget<br>使用的构建器回调的签名AnimatedList。</p><p>AnimatedListRemovedItemBuilder（BuildContext context， Animation &lt; double &gt; animation） → Widget<br>使用的构建器回调的签名AnimatedListState.removeItem。</p><p>AnimatedSwitcherLayoutBuilder（List &lt; Widget &gt; children） → Widget<br>用于生成自定义布局的构建器的签名 AnimatedSwitcher。[…]</p><p>AnimatedSwitcherTransitionBuilder（Widget child， Animation &lt; double &gt; animation） → Widget<br>用于生成自定义转换的构建器的签名 AnimatedSwitcher。[…]</p><p>AnimationStatusListener（AnimationStatus status） →无效<br>使用附加的听众签名Animation.addStatusListener。</p><p>AsyncWidgetBuilder &lt; T &gt; （BuildContext context， AsyncSnapshot &lt; T &gt; snapshot） → Widget<br>签名用于基于异步交互构建widget的策略。[…]</p><p>CreateRectTween（Rect begin， Rect end） → Tween &lt; Rect &gt;<br>一个函数的签名，它接受两个Rect实例并返回 RectTween它们之间的转换。[…]</p><p>DismissDirectionCallback（DismissDirection direction） →void<br>使用的签名Dismissible表示已在给定的情况下被解雇direction。[…]</p><p>DraggableCanceledCallback（速度 速度， 偏移 偏移） →无效<br>在Draggable没有被a接受的情况下丢弃a的签名DragTarget。[…]</p><p>DragTargetAccept &lt; T &gt; （T 数据） →无效<br>用于使a DragTarget接受给定数据的签名。[…]</p><p>DragTargetBuilder &lt; T &gt; （BuildContext context， List &lt; T &gt; candidateData， List rejectedData） → Widget<br>建立儿童的签名DragTarget。[…]</p><p>DragTargetLeave &lt; T &gt; （T 数据） →无效<br>Draggable离开 时签名DragTarget。[…]</p><p>DragTargetWillAccept &lt; T &gt; （T 数据） → bool<br>用于确定给定数据是否将被a接受的签名DragTarget。[…]</p><p>ElementVisitor（元素 元素） →无效<br>签名回拨给BuildContext.visitChildElements。[…]</p><p>ErrorWidgetBuilder（FlutterErrorDetails 详细信息） → Widget<br>构建窗口widget时发生错误时调用的构造函数的签名。[…]</p><p>FormFieldBuilder &lt; T &gt; （FormFieldState &lt; T &gt; 字段） → Widget<br>用于构建表示表单字段的窗口widget的签名。[…]</p><p>FormFieldSetter &lt; T &gt; （T newValue） →无效<br>签名，以便在表单字段更改值时收到通知。[…]</p><p>FormFieldValidator &lt; T &gt; （T 值） → 字符串<br>用于验证表单字段的签名。[…]</p><p>GenerateAppTitle（BuildContext context） → String<br>签名WidgetsApp.onGenerateTitle。[…]</p><p>GestureDragCancelCallback（） →无效<br>当先前触发的指针GestureDragDownCallback未完成时的签名 。[…]</p><p>GestureDragDownCallback（DragDownDetails 详细信息） →void<br>当指针接触屏幕并可能开始移动时的签名。[…]</p><p>GestureDragEndCallback（DragEndDetails 详细信息） →void<br>当先前与屏幕接触并且移动的指针不再与屏幕接触时的签名。[…]</p><p>GestureDragStartCallback（DragStartDetails 详细信息） →void<br>指针接触屏幕并开始移动时的签名。[…]</p><p>GestureDragUpdateCallback（DragUpdateDetails 详细信息） →void<br>当与屏幕接触并且移动的指针再次移动时签名。[…]</p><p>GestureLongPressCallback（） →无效<br>当指针长时间保持与同一位置的屏幕保持接触时的签名。</p><p>GestureRecognizerFactoryConstructor &lt; T扩展GestureRecognizer &gt; （） →T<br>签名用于实现的闭包GestureRecognizerFactory.constructor。</p><p>GestureRecognizerFactoryInitializer &lt; T扩展GestureRecognizer &gt; （T 实例） →无效<br>签名用于实现的闭包GestureRecognizerFactory.initializer。</p><p>GestureScaleEndCallback（ScaleEndDetails 详细信息） →无效<br>当指针不再与屏幕接触时的签名。</p><p>GestureScaleStartCallback（ScaleStartDetails 详细信息） →无效<br>当与屏幕接触的指针建立焦点并且初始比例为1.0时的签名。</p><p>GestureScaleUpdateCallback（ScaleUpdateDetails 详细信息） →无效<br>当与屏幕接触的指针指示新的焦点和/或比例时的签名。</p><p>GestureTapCallback（） →无效<br>发生敲击时的签名。</p><p>GestureTapCancelCallback（） →无效<br>当先前触发a的指针GestureTapDownCallback不会导致点击时的签名 。</p><p>GestureTapDownCallback（TapDownDetails 详细信息） →无效<br>当可能导致点击的指针与屏幕接触时的签名。[…]</p><p>GestureTapUpCallback（TapUpDetails 详细信息） →无效<br>当触发敲击的指针停止接触屏幕时的签名。[…]</p><p>ImageListener（ImageInfo image， bool synchronousCall） →void<br>报告图像可用的回调签名。[…]</p><p>IndexedWidgetBuilder（BuildContext context， int index） → Widget<br>用于为给定索引创建窗口widget的函数的签名，例如，在列表中。[…]</p><p>InspectorSelectButtonBuilder（BuildContext context， VoidCallback onPressed） → Widget<br>使用的构建器回调的签名 WidgetInspector.selectButtonBuilder。</p><p>InspectorSelectionChangedCallback（） →无效<br>用于选择的签名更改回调 WidgetInspectorService.selectionChangedCallback。</p><p>LayoutWidgetBuilder（BuildContext context， BoxConstraints constraints） → Widget</p><p>LayoutBuilder构建器函数 的签名。</p><p>LocaleResolutionCallback（Locale locale， Iterable &lt; Locale &gt; supportedLocales） → Locale<br>签名WidgetsApp.localeResolutionCallback。[…]</p><p>NestedScrollViewHeaderSliv​​ersBuilder（BuildContext context， bool innerBoxIsScrolled） → List &lt; Widget &gt;<br>NestedScrollView用于构建其标题的 签名。[…]</p><p>NotificationListenerCallback &lt; T扩展通知 &gt; （T 通知） → bool<br>Notification听众 签名。[…]</p><p>OrientationWidgetBuilder（BuildContext context， Orientation orientation） → Widget<br>签名用于构建给定的widget的函数Orientation。[…]</p><p>PointerCancelEventListener（PointerCancelEvent 事件） →void<br>用于收听PointerCancelEvent活动的签名。[…]</p><p>PointerDownEventListener（PointerDownEvent 事件） →void<br>用于收听PointerDownEvent活动的签名。[…]</p><p>PointerMoveEventListener（PointerMoveEvent 事件） →void<br>用于收听PointerMoveEvent活动的签名。[…]</p><p>PointerUpEventListener（PointerUpEvent 事件） →void<br>用于收听PointerUpEvent活动的签名。[…]</p><p>RouteFactory（RouteSettings 设置） → 路由<br>为给定的路线设置创建路线。[…]</p><p>RoutePageBuilder（BuildContext context， Animation &lt; double &gt; animation， Animation &lt; double &gt; secondaryAnimation） → Widget<br>用于PageRouteBuilder构建路径主要内容的函数的签名。[…]</p><p>RoutePredicate（路线 路线） → 布尔<br>Navigator.popUntil谓词参数的 签名。</p><p>RouteTransitionsBuilder（BuildContext context， Animation &lt; double &gt; animation， Animation &lt; double &gt; secondaryAnimation， Widget child） → Widget<br>用于PageRouteBuilder构建路径转换的函数的签名。[…]</p><p>ScrollNotificationPredicate（ScrollNotification 通知） → bool<br>谓词ScrollNotification，用于自定义侦听来自其子项的通知的widget。</p><p>SelectionChangedCallback（TextSelection selection， SelectionChangedCause cause） →void<br>用户更改选择（包括光标位置）时报告的回调签名。</p><p>SemanticsBuilderCallback（Size size） → List &lt; CustomPainterSemantics &gt;<br>返回的函数的签名CustomPainter.semanticsBuilder。[…]</p><p>ShaderCallback（Rect bounds） → Shader<br>签名为创建Shader给定的函数Rect。[…]</p><p>StatefulWidgetBuilder（BuildContext context， StateSetter setState） → Widget<br>使用的构建器回调的签名StatefulBuilder。[…]</p><p>StateSetter（VoidCallback fn） →无效<br>State.setState功能 的签名。</p><p>TextSelectionOverlayChanged（TextEditingValue value， Rect caretRect） →void<br>签名报告变更的筛选组件 TextEditingValue为的目的TextSelectionOverlay。该 caretRect参数给出插入符在的坐标空间中的位置RenderBox由给定的TextSelectionOverlay.renderObject。[…]</p><p>TransitionBuilder（BuildContext context， Widget child） → Widget<br>给child建立widget的构建器。[…]</p><p>TweenConstructor &lt; T &gt; （T targetValue） → Tween &lt; T &gt;<br>签名Tween工厂。[…]</p><p>TweenVisitor &lt; T &gt; （Tween &lt; T &gt; 补间， T targetValue， TweenConstructor &lt; T &gt; 构造函数） → Tween &lt; T &gt;<br>传递回调的签名AnimatedWidgetBaseState.forEachTween。</p><p>ValueChanged &lt; T &gt; （T 值） →无效<br>报告基础值已更改的回调签名。[…]</p><p>ValueGetter &lt; T &gt; （） →T<br>用于按需报告值的回调签名。[…]</p><p>ValueSetter &lt; T &gt; （T 值） →无效<br>用于报告已设置值的回调的签名。[…]</p><p>ViewportBuilder（BuildContext context， ViewportOffset position） → Widget<br>用于Scrollable构建视口的签名，通过该视口显示可滚动内容。</p><p>VoidCallback（） →无效<br>没有参数的回调签名并且不返回任何数据。</p><p>WidgetBuilder（BuildContext context） → Widget<br>用于创建窗口widget的函数的签名，例如StatelessWidget.build 或State.build。[…]</p><p>WillPopCallback（） → 未来&lt; bool &gt;<br>签名回拨，验证可以调用Navigator.pop。[…]</p><p>异常/错误</p><p>FlutterError<br>用于报告特定于Flutter的断言失败和合同违规的错误类。</p><p>TickerCanceled<br>当股票代码被取消时，TickerFuture.orCancel未来Ticker对象 抛出异常。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 设计模式</title>
      <link href="/back-end/2018-07-30-java-design-pattern.html"/>
      <url>/back-end/2018-07-30-java-design-pattern.html</url>
      
        <content type="html"><![CDATA[<p>一直需要的Java的设计模式.<br><a id="more"></a></p><blockquote><p>作者：<a href="https://github.com/CyC2018">CyC2018</a><br>原文链接: <a href="https://cyc2018.gitbooks.io/interview-notebook/content/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html">设计模式</a></p></blockquote><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>设计模式是解决问题的方案，学习现有的设计模式可以做到经验复用。</p><p>拥有设计模式词汇，在沟通时就能用更少的词汇来讨论，并且不需要了解底层细节。</p><p><a href="https://github.com/CyC2018/Design-Pattern-Java">源码以及 UML 图</a></p><h1 id="二、创建型"><a href="#二、创建型" class="headerlink" title="二、创建型"></a>二、创建型</h1><h2 id="1-单例（Singleton）"><a href="#1-单例（Singleton）" class="headerlink" title="1. 单例（Singleton）"></a>1. 单例（Singleton）</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>确保一个类只有一个实例，并提供该实例的全局访问点。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p>使用一个私有构造函数、一个私有静态变量以及一个公有静态函数来实现。</p><p>私有构造函数保证了不能通过构造函数来创建对象实例，只能通过公有静态函数返回唯一的私有静态变量。</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/562f2844-d77c-40e0-887a-28a7128abd42.png"/> </div><br></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>（一）懒汉式-线程不安全</p><p>以下实现中，私有静态变量 uniqueInstance 被延迟化实例化，这样做的好处是，如果没有用到该类，那么就不会实例化 uniqueInstance，从而节约资源。</p><p>这个实现在多线程环境下是不安全的，如果多个线程能够同时进入 <code>if (uniqueInstance == null)</code> ，并且此时 uniqueInstance 为 null，那么多个线程会执行 <code>uniqueInstance = new Singleton();</code> 语句，这将导致多次实例化 uniqueInstance。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（二）懒汉式-线程安全</p><p>只需要对 getUniqueInstance() 方法加锁，那么在一个时间点只能有一个线程能够进入该方法，从而避免了对 uniqueInstance 进行多次实例化的问题。</p><p>但是这样有一个问题，就是当一个线程进入该方法之后，其它线程试图进入该方法都必须等待，因此性能上有一定的损耗。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（三）饿汉式-线程安全</p><p>线程不安全问题主要是由于 uniqueInstance 被实例化了多次，如果 uniqueInstance 采用直接实例化的话，就不会被实例化多次，也就不会产生线程不安全问题。但是直接实例化的方式也丢失了延迟实例化带来的节约资源的优势。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton();</span><br></pre></td></tr></table></figure><p>（四）双重校验锁-线程安全</p><p>uniqueInstance 只需要被实例化一次，之后就可以直接使用了。加锁操作只需要对实例化那部分的代码进行。也就是说，只有当 uniqueInstance 没有被实例化时，才需要进行加锁。</p><p>双重校验锁先判断 uniqueInstance 是否已经被实例化，如果没有被实例化，那么才对实例化语句进行加锁。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑下面的实现，也就是只使用了一个 if 语句。在 uniqueInstance == null 的情况下，如果两个线程同时执行 if 语句，那么两个线程就会同时进入 if 语句块内。虽然在 if 语句块内有加锁操作，但是两个线程都会执行 <code>uniqueInstance = new Singleton();</code> 这条语句，只是先后的问题，也就是说会进行两次实例化，从而产生了两个实例。因此必须使用双重校验锁，也就是需要使用两个 if 语句。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">        uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>uniqueInstance 采用 volatile 关键字修饰也是很有必要的。<code>uniqueInstance = new Singleton();</code> 这段代码其实是分为三步执行。</p><ol><li>分配内存空间</li><li>初始化对象</li><li>将 uniqueInstance 指向分配的内存地址</li></ol><p>但是由于 JVM 具有指令重排的特性，有可能执行顺序变为了 1&gt;3&gt;2，这在单线程情况下自然是没有问题。但如果是多线程下，有可能获得是一个还没有被初始化的实例，以致于程序出错。</p><p>使用 volatile 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行。</p><p>（五）静态内部类实现</p><p>当 Singleton 类加载时，静态内部类 SingletonHolder 没有被加载进内存。只有当调用 <code>getUniqueInstance()</code> 方法从而触发 <code>SingletonHolder.INSTANCE</code> 时 SingletonHolder 才会被加载，此时初始化 INSTANCE 实例。</p><p>这种方式不仅具有延迟初始化的好处，而且由虚拟机提供了对线程安全的支持。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class SingletonHolder &#123;</span><br><span class="line">        private static final Singleton INSTANCE = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton getUniqueInstance() &#123;</span><br><span class="line">        return SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（五）枚举实现</p><p>这是单例模式的最佳实践，它实现简单，并且在面对复杂的序列化或者反射攻击的时候，能够防止实例化多次。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    uniqueInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑以下单例模式的实现，该 Singleton 在每次序列化的时候都会创建一个新的实例，为了保证只创建一个实例，必须声明所有字段都是 transient，并且提供一个 readResolve() 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不使用枚举来实现单例模式，会出现反射攻击，因为通过 setAccessible() 方法可以将私有构造函数的访问级别设置为 public，然后调用构造函数从而实例化对象。如果要防止这种攻击，需要在构造函数中添加防止实例化第二个对象的代码。</p><p>从上面的讨论可以看出，解决序列化和反射攻击很麻烦，而枚举实现不会出现这两种问题，所以说枚举实现单例模式是最佳实践。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>Logger Classes</li><li>Configuration Classes</li><li>Accesing resources in shared mode</li><li>Factories implemented as Singletons</li></ul><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#getRuntime%28%29">java.lang.Runtime#getRuntime()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/awt/Desktop.html#getDesktop--">java.awt.Desktop#getDesktop()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getSecurityManager--">java.lang.System#getSecurityManager()</a></li></ul><h2 id="2-简单工厂（Simple-Factory）"><a href="#2-简单工厂（Simple-Factory）" class="headerlink" title="2. 简单工厂（Simple Factory）"></a>2. 简单工厂（Simple Factory）</h2><h3 id="意图-1"><a href="#意图-1" class="headerlink" title="意图"></a>意图</h3><p>在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p>简单工厂不是设计模式，更像是一种编程习惯。它把实例化的操作单独放到一个类中，这个类就成为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化。</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/c79da808-0f28-4a36-bc04-33ccc5b83c13.png"/> </div><br></p><p>这样做能把客户类和具体子类的实现解耦，客户类不再需要知道有哪些子类以及应当实例化哪个子类。因为客户类往往有多个，如果不使用简单工厂，所有的客户类都要知道所有子类的细节。而且一旦子类发生改变，例如增加子类，那么所有的客户类都要进行修改。</p><p>如果存在下面这种代码，就需要使用简单工厂将对象实例化的部分放到简单工厂中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> type = <span class="number">1</span>;</span><br><span class="line">        Product product;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">            product = <span class="keyword">new</span> ConcreteProduct1();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">            product = <span class="keyword">new</span> ConcreteProduct2();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            product = <span class="keyword">new</span> ConcreteProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct1();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleFactory simpleFactory = <span class="keyword">new</span> SimpleFactory();</span><br><span class="line">        Product product = simpleFactory.createProduct(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-工厂方法（Factory-Method）"><a href="#3-工厂方法（Factory-Method）" class="headerlink" title="3. 工厂方法（Factory Method）"></a>3. 工厂方法（Factory Method）</h2><h3 id="意图-2"><a href="#意图-2" class="headerlink" title="意图"></a>意图</h3><p>定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法把实例化推迟到子类。</p><h3 id="类图-2"><a href="#类图-2" class="headerlink" title="类图"></a>类图</h3><p>在简单工厂中，创建对象的是另一个类，而在工厂方法中，是由子类来创建对象。</p><p>下图中，Factory 有一个 doSomething() 方法，这个方法需要用到一个产品对象，这个产品对象由 factoryMethod() 方法创建。该方法是抽象的，需要由子类去实现。</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/1818e141-8700-4026-99f7-900a545875f5.png"/> </div><br></p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Product product = factoryMethod();</span><br><span class="line">        <span class="comment">// do something with the product</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK-1"><a href="#JDK-1" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Calendar.html#getInstance--">java.util.Calendar</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-">java.util.ResourceBundle</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html#getInstance--">java.text.NumberFormat</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html#forName-java.lang.String-">java.nio.charset.Charset</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/net/URLStreamHandlerFactory.html#createURLStreamHandler-java.lang.String-">java.net.URLStreamHandlerFactory</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html#of-E-">java.util.EnumSet</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller--">javax.xml.bind.JAXBContext</a></li></ul><h2 id="4-抽象工厂（Abstract-Factory）"><a href="#4-抽象工厂（Abstract-Factory）" class="headerlink" title="4. 抽象工厂（Abstract Factory）"></a>4. 抽象工厂（Abstract Factory）</h2><h3 id="意图-3"><a href="#意图-3" class="headerlink" title="意图"></a>意图</h3><p>提供一个接口，用于创建  <strong>相关的对象家族</strong> 。</p><h3 id="类图-3"><a href="#类图-3" class="headerlink" title="类图"></a>类图</h3><p>抽象工厂模式创建的是对象家族，也就是很多对象而不是一个对象，并且这些对象是相关的，也就是说必须一起创建出来。而工厂方法模式只是用于创建一个对象，这和抽象工厂模式有很大不同。</p><p>抽象工厂模式用到了工厂方法模式来创建单一对象，AbstractFactory 中的 createProductA() 和 createProductB() 方法都是让子类来实现，这两个方法单独来看就是在创建一个对象，这符合工厂方法模式的定义。</p><p>至于创建对象的家族这一概念是在 Client 体现，Client 要通过 AbstractFactory 同时调用两个方法来创建出两个对象，在这里这两个对象就有很大的相关性，Client 需要同时创建出这两个对象。</p><p>从高层次来看，抽象工厂使用了组合，即 Cilent 组合了 AbstractFactory，而工厂方法模式使用了继承。</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/8668a3e1-c9c7-4fcb-98b2-a96a5d841579.png"/> </div><br></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">AbstractProductA <span class="title">createProductA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AbstractProductB <span class="title">createProductB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">AbstractProductA <span class="title">createProductA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AbstractProductB <span class="title">createProductB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractFactory abstractFactory = <span class="keyword">new</span> ConcreteFactory1();</span><br><span class="line">        AbstractProductA productA = abstractFactory.createProductA();</span><br><span class="line">        AbstractProductB productB = abstractFactory.createProductB();</span><br><span class="line">        <span class="comment">// do something with productA and productB</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK-2"><a href="#JDK-2" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html">javax.xml.parsers.DocumentBuilderFactory</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--">javax.xml.transform.TransformerFactory</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--">javax.xml.xpath.XPathFactory</a></li></ul><h2 id="5-生成器（Builder）"><a href="#5-生成器（Builder）" class="headerlink" title="5. 生成器（Builder）"></a>5. 生成器（Builder）</h2><h3 id="意图-4"><a href="#意图-4" class="headerlink" title="意图"></a>意图</h3><p>封装一个对象的构造过程，并允许按步骤构造。</p><h3 id="类图-4"><a href="#类图-4" class="headerlink" title="类图"></a>类图</h3><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/13b0940e-d1d7-4b17-af4f-b70cb0a75e08.png"/> </div><br></p><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><p>以下是一个简易的 StringBuilder 实现，参考了 JDK 1.8 源码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">char</span>[] value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractStringBuilder</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        ensureCapacityInternal(count + <span class="number">1</span>);</span><br><span class="line">        value[count++] = c;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minimumCapacity - value.length &gt; <span class="number">0</span>)</span><br><span class="line">            expandCapacity(minimumCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">expandCapacity</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = value.length * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minimumCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minimumCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (minimumCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">            newCapacity = Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        value = Arrays.copyOf(value, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Create a copy, don't share the array</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(value, <span class="number">0</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = <span class="number">26</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            sb.append((<span class="keyword">char</span>) (<span class="string">'a'</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">abcdefghijklmnopqrstuvwxyz</span><br></pre></td></tr></table></figure><h3 id="JDK-3"><a href="#JDK-3" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html">java.lang.StringBuilder</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html#put-byte-">java.nio.ByteBuffer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html#append-boolean-">java.lang.StringBuffer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Appendable.html">java.lang.Appendable</a></li><li><a href="https://github.com/apache/camel/tree/0e195428ee04531be27a0b659005e3aa8d159d23/camel-core/src/main/java/org/apache/camel/builder">Apache Camel builders</a></li></ul><h2 id="6-原型模式（Prototype）"><a href="#6-原型模式（Prototype）" class="headerlink" title="6. 原型模式（Prototype）"></a>6. 原型模式（Prototype）</h2><h3 id="意图-5"><a href="#意图-5" class="headerlink" title="意图"></a>意图</h3><p>使用原型实例指定要创建对象的类型，通过复制这个原型来创建新对象。</p><h3 id="类图-5"><a href="#类图-5" class="headerlink" title="类图"></a>类图</h3><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/a40661e4-1a71-46d2-a158-ff36f7fc3331.png"/> </div><br></p><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Prototype <span class="title">myClone</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype</span> <span class="keyword">extends</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String filed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcretePrototype</span><span class="params">(String filed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filed = filed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Prototype <span class="title">myClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcretePrototype(filed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Prototype prototype = <span class="keyword">new</span> ConcretePrototype(<span class="string">"abc"</span>);</span><br><span class="line">        Prototype clone = prototype.myClone();</span><br><span class="line">        System.out.println(clone.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">abc</span><br></pre></td></tr></table></figure><h3 id="JDK-4"><a href="#JDK-4" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone%28%29">java.lang.Object#clone()</a></li></ul><h1 id="三、行为型"><a href="#三、行为型" class="headerlink" title="三、行为型"></a>三、行为型</h1><h2 id="1-责任链（Chain-Of-Responsibility）"><a href="#1-责任链（Chain-Of-Responsibility）" class="headerlink" title="1. 责任链（Chain Of Responsibility）"></a>1. 责任链（Chain Of Responsibility）</h2><h3 id="意图-6"><a href="#意图-6" class="headerlink" title="意图"></a>意图</h3><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链发送该请求，直到有一个对象处理它为止。</p><h3 id="类图-6"><a href="#类图-6" class="headerlink" title="类图"></a>类图</h3><ul><li>Handler：定义处理请求的接口，并且实现后继链（successor）</li></ul><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/691f11eb-31a7-46be-9de1-61f433c4b3c7.png"/> </div><br></p><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Handler successor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteHandler1</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(successor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getType() == RequestType.type1) &#123;</span><br><span class="line">            System.out.println(request.getName() + <span class="string">" is handle by ConcreteHandler1"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            successor.handleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteHandler2</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(successor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getType() == RequestType.type2) &#123;</span><br><span class="line">            System.out.println(request.getName() + <span class="string">" is handle by ConcreteHandler2"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            successor.handleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RequestType type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(RequestType type, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestType <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RequestType &#123;</span><br><span class="line">    type1, type2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Handler handler1 = <span class="keyword">new</span> ConcreteHandler1(<span class="keyword">null</span>);</span><br><span class="line">        Handler handler2 = <span class="keyword">new</span> ConcreteHandler2(handler1);</span><br><span class="line">        Request request1 = <span class="keyword">new</span> Request(RequestType.type1, <span class="string">"request1"</span>);</span><br><span class="line">        handler2.handleRequest(request1);</span><br><span class="line">        Request request2 = <span class="keyword">new</span> Request(RequestType.type2, <span class="string">"request2"</span>);</span><br><span class="line">        handler2.handleRequest(request2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">request1 is handle by ConcreteHandler1</span><br><span class="line">request2 is handle by ConcreteHandler2</span><br></pre></td></tr></table></figure><h3 id="JDK-5"><a href="#JDK-5" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/logging/Logger.html#log%28java.util.logging.Level,%20java.lang.String%29">java.util.logging.Logger#log()</a></li><li><a href="https://commons.apache.org/proper/commons-chain/index.html">Apache Commons Chain</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter-javax.servlet.ServletRequest-javax.servlet.ServletResponse-javax.servlet.FilterChain-">javax.servlet.Filter#doFilter()</a></li></ul><h2 id="2-命令（Command）"><a href="#2-命令（Command）" class="headerlink" title="2. 命令（Command）"></a>2. 命令（Command）</h2><h3 id="意图-7"><a href="#意图-7" class="headerlink" title="意图"></a>意图</h3><p>将命令封装成对象中，以便使用命令来参数化其它对象，或者将命令对象放入队列中进行排队，或者将命令对象的操作记录到日志中，以及支持可撤销的操作。</p><h3 id="类图-7"><a href="#类图-7" class="headerlink" title="类图"></a>类图</h3><ul><li>Command：命令</li><li>Receiver：命令接收者，也就是命令真正的执行者</li><li>Invoker：通过它来调用命令</li><li>Client：可以设置命令与命令的接收者</li></ul><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/ae1b27b8-bc13-42e7-ac12-a2242e125499.png"/> </div><br></p><h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><p>设计一个遥控器，可以控制电灯开关。</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/e6bded8e-41a0-489a-88a6-638e88ab7666.jpg"/> </div><br></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    Light light;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(Light light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    Light light;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOffCommand</span><span class="params">(Light light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Light is on!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Light is off!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遥控器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command[] onCommands;</span><br><span class="line">    <span class="keyword">private</span> Command[] offCommands;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> slotNum = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onCommands = <span class="keyword">new</span> Command[slotNum];</span><br><span class="line">        <span class="keyword">this</span>.offCommands = <span class="keyword">new</span> Command[slotNum];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnCommand</span><span class="params">(Command command, <span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        onCommands[slot] = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOffCommand</span><span class="params">(Command command, <span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        offCommands[slot] = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonWasPushed</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        onCommands[slot].execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offButtonWasPushed</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        offCommands[slot].execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">        Light light = <span class="keyword">new</span> Light();</span><br><span class="line">        Command lightOnCommand = <span class="keyword">new</span> LightOnCommand(light);</span><br><span class="line">        Command lightOffCommand = <span class="keyword">new</span> LightOffCommand(light);</span><br><span class="line">        invoker.setOnCommand(lightOnCommand, <span class="number">0</span>);</span><br><span class="line">        invoker.setOffCommand(lightOffCommand, <span class="number">0</span>);</span><br><span class="line">        invoker.onButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        invoker.offButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK-6"><a href="#JDK-6" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html">java.lang.Runnable</a></li><li><a href="https://github.com/Netflix/Hystrix/wiki">Netflix Hystrix</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/swing/Action.html">javax.swing.Action</a></li></ul><h2 id="3-解释器（Interpreter）"><a href="#3-解释器（Interpreter）" class="headerlink" title="3. 解释器（Interpreter）"></a>3. 解释器（Interpreter）</h2><h3 id="意图-8"><a href="#意图-8" class="headerlink" title="意图"></a>意图</h3><p>为语言创建解释器，通常由语言的语法和语法分析来定义。</p><h3 id="类图-8"><a href="#类图-8" class="headerlink" title="类图"></a>类图</h3><ul><li>TerminalExpression：终结符表达式，每个终结符都需要一个 TerminalExpression</li><li>Context：上下文，包含解释器之外的一些全局信息</li></ul><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/794239e3-4baf-4aad-92df-f02f59b2a6fe.png"/> </div><br></p><h3 id="实现-7"><a href="#实现-7" class="headerlink" title="实现"></a>实现</h3><p>以下是一个规则检验器实现，具有 and 和 or 规则，通过规则可以构建一颗解析树，用来检验一个文本是否满足解析树定义的规则。</p><p>例如一颗解析树为 D And (A Or (B C))，文本 “D A” 满足该解析树定义的规则。</p><p>这里的 Context 指的是 String。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String literal = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TerminalExpression</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        literal = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(str);</span><br><span class="line">        <span class="keyword">while</span> (st.hasMoreTokens()) &#123;</span><br><span class="line">            String test = st.nextToken();</span><br><span class="line">            <span class="keyword">if</span> (test.equals(literal)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Expression expression1 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Expression expression2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AndExpression</span><span class="params">(Expression expression1, Expression expression2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expression1 = expression1;</span><br><span class="line">        <span class="keyword">this</span>.expression2 = expression2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expression1.interpret(str) &amp;&amp; expression2.interpret(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Expression expression1 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Expression expression2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrExpression</span><span class="params">(Expression expression1, Expression expression2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expression1 = expression1;</span><br><span class="line">        <span class="keyword">this</span>.expression2 = expression2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expression1.interpret(str) || expression2.interpret(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建解析树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title">buildInterpreterTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Literal</span></span><br><span class="line">        Expression terminal1 = <span class="keyword">new</span> TerminalExpression(<span class="string">"A"</span>);</span><br><span class="line">        Expression terminal2 = <span class="keyword">new</span> TerminalExpression(<span class="string">"B"</span>);</span><br><span class="line">        Expression terminal3 = <span class="keyword">new</span> TerminalExpression(<span class="string">"C"</span>);</span><br><span class="line">        Expression terminal4 = <span class="keyword">new</span> TerminalExpression(<span class="string">"D"</span>);</span><br><span class="line">        <span class="comment">// B C</span></span><br><span class="line">        Expression alternation1 = <span class="keyword">new</span> OrExpression(terminal2, terminal3);</span><br><span class="line">        <span class="comment">// A Or (B C)</span></span><br><span class="line">        Expression alternation2 = <span class="keyword">new</span> OrExpression(terminal1, alternation1);</span><br><span class="line">        <span class="comment">// D And (A Or (B C))</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AndExpression(terminal4, alternation2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Expression define = buildInterpreterTree();</span><br><span class="line">        String context1 = <span class="string">"D A"</span>;</span><br><span class="line">        String context2 = <span class="string">"A B"</span>;</span><br><span class="line">        System.out.println(define.interpret(context1));</span><br><span class="line">        System.out.println(define.interpret(context2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure><h3 id="JDK-7"><a href="#JDK-7" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">java.util.Pattern</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/text/Normalizer.html">java.text.Normalizer</a></li><li>All subclasses of <a href="http://docs.oracle.com/javase/8/docs/api/java/text/Format.html">java.text.Format</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/el/ELResolver.html">javax.el.ELResolver</a></li></ul><h2 id="4-迭代器（Iterator）"><a href="#4-迭代器（Iterator）" class="headerlink" title="4. 迭代器（Iterator）"></a>4. 迭代器（Iterator）</h2><h3 id="意图-9"><a href="#意图-9" class="headerlink" title="意图"></a>意图</h3><p>提供一种顺序访问聚合对象元素的方法，并且不暴露聚合对象的内部表示。</p><h3 id="类图-9"><a href="#类图-9" class="headerlink" title="类图"></a>类图</h3><ul><li>Aggregate 是聚合类，其中 createIterator() 方法可以产生一个 Iterator；</li><li>Iterator 主要定义了 hasNext() 和 next() 方法。</li><li>Client 组合了 Aggregate，为了迭代遍历 Aggregate，也需要组合 Iterator。</li></ul><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/b0f61ac2-a4b6-4042-9cf0-ccf4238c1ff7.png"/> </div><br></p><h3 id="实现-8"><a href="#实现-8" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="function">Iterator <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">implements</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer[] items;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteAggregate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> Integer[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">            items[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteIterator&lt;Integer&gt;(items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Item <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Item[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteIterator</span><span class="params">(Item[] items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[position++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position &lt; items.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Aggregate aggregate = <span class="keyword">new</span> ConcreteAggregate();</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = aggregate.createIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK-8"><a href="#JDK-8" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html">java.util.Iterator</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html">java.util.Enumeration</a></li></ul><h2 id="5-中介者（Mediator）"><a href="#5-中介者（Mediator）" class="headerlink" title="5. 中介者（Mediator）"></a>5. 中介者（Mediator）</h2><h3 id="意图-10"><a href="#意图-10" class="headerlink" title="意图"></a>意图</h3><p>集中相关对象之间复杂的沟通和控制方式。</p><h3 id="类图-10"><a href="#类图-10" class="headerlink" title="类图"></a>类图</h3><ul><li>Mediator：中介者，定义一个接口用于与各同事（Colleague）对象通信。</li><li>Colleague：同事，相关对象</li></ul><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/d0afdd23-c9a5-4d1c-9b3d-404bff3bd0d1.png"/> </div><br></p><h3 id="实现-9"><a href="#实现-9" class="headerlink" title="实现"></a>实现</h3><p>Alarm（闹钟）、CoffeePot（咖啡壶）、Calendar（日历）、Sprinkler（喷头）是一组相关的对象，在某个对象的事件产生时需要去操作其它对象，形成了下面这种依赖结构：</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/82cfda3b-b53b-4c89-9fdb-26dd2db0cd02.jpg"/> </div><br></p><p>使用中介者模式可以将复杂的依赖结构变成星形结构：</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/5359cbf5-5a79-4874-9b17-f23c53c2cb80.jpg"/> </div><br></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Mediator mediator)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Alarm</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        mediator.doEvent(<span class="string">"alarm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAlarm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doAlarm()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeePot</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        mediator.doEvent(<span class="string">"coffeePot"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCoffeePot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doCoffeePot()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calender</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        mediator.doEvent(<span class="string">"calender"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCalender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doCalender()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sprinkler</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        mediator.doEvent(<span class="string">"sprinkler"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSprinkler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doSprinkler()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doEvent</span><span class="params">(String eventType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Alarm alarm;</span><br><span class="line">    <span class="keyword">private</span> CoffeePot coffeePot;</span><br><span class="line">    <span class="keyword">private</span> Calender calender;</span><br><span class="line">    <span class="keyword">private</span> Sprinkler sprinkler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteMediator</span><span class="params">(Alarm alarm, CoffeePot coffeePot, Calender calender, Sprinkler sprinkler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.alarm = alarm;</span><br><span class="line">        <span class="keyword">this</span>.coffeePot = coffeePot;</span><br><span class="line">        <span class="keyword">this</span>.calender = calender;</span><br><span class="line">        <span class="keyword">this</span>.sprinkler = sprinkler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doEvent</span><span class="params">(String eventType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (eventType) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"alarm"</span>:</span><br><span class="line">                doAlarmEvent();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"coffeePot"</span>:</span><br><span class="line">                doCoffeePotEvent();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"calender"</span>:</span><br><span class="line">                doCalenderEvent();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                doSprinklerEvent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAlarmEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        alarm.doAlarm();</span><br><span class="line">        coffeePot.doCoffeePot();</span><br><span class="line">        calender.doCalender();</span><br><span class="line">        sprinkler.doSprinkler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCoffeePotEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCalenderEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSprinklerEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Alarm alarm = <span class="keyword">new</span> Alarm();</span><br><span class="line">        CoffeePot coffeePot = <span class="keyword">new</span> CoffeePot();</span><br><span class="line">        Calender calender = <span class="keyword">new</span> Calender();</span><br><span class="line">        Sprinkler sprinkler = <span class="keyword">new</span> Sprinkler();</span><br><span class="line">        Mediator mediator = <span class="keyword">new</span> ConcreteMediator(alarm, coffeePot, calender, sprinkler);</span><br><span class="line">        <span class="comment">// 闹钟事件到达，调用中介者就可以操作相关对象</span></span><br><span class="line">        alarm.onEvent(mediator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">doAlarm()</span><br><span class="line">doCoffeePot()</span><br><span class="line">doCalender()</span><br><span class="line">doSprinkler()</span><br></pre></td></tr></table></figure><h3 id="JDK-9"><a href="#JDK-9" class="headerlink" title="JDK"></a>JDK</h3><ul><li>All scheduleXXX() methods of <a href="http://docs.oracle.com/javase/8/docs/api/java/util/Timer.html">java.util.Timer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html#execute-java.lang.Runnable-">java.util.concurrent.Executor#execute()</a></li><li>submit() and invokeXXX() methods of <a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html">java.util.concurrent.ExecutorService</a></li><li>scheduleXXX() methods of <a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html">java.util.concurrent.ScheduledExecutorService</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#invoke-java.lang.Object-java.lang.Object...-">java.lang.reflect.Method#invoke()</a></li></ul><h2 id="6-备忘录（Memento）"><a href="#6-备忘录（Memento）" class="headerlink" title="6. 备忘录（Memento）"></a>6. 备忘录（Memento）</h2><h3 id="意图-11"><a href="#意图-11" class="headerlink" title="意图"></a>意图</h3><p>在不违反封装的情况下获得对象的内部状态，从而在需要时可以将对象恢复到最初状态。</p><h3 id="类图-11"><a href="#类图-11" class="headerlink" title="类图"></a>类图</h3><ul><li>Originator：原始对象</li><li>Caretaker：负责保存好备忘录</li><li>Menento：备忘录，存储原始对象的的状态。备忘录实际上有两个接口，一个是提供给 Caretaker 的窄接口：它只能将备忘录传递给其它对象；一个是提供给 Originator 的宽接口，允许它访问到先前状态所需的所有数据。理想情况是只允许 Originator 访问本备忘录的内部状态。</li></ul><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/867e93eb-3161-4f39-b2d2-c0cd3788e194.png"/> </div><br></p><h3 id="实现-10"><a href="#实现-10" class="headerlink" title="实现"></a>实现</h3><p>以下实现了一个简单计算器程序，可以输入两个值，然后计算这两个值的和。备忘录模式允许将这两个值存储起来，然后在某个时刻用存储的状态进行恢复。</p><p>实现参考：<a href="https://www.oodesign.com/memento-pattern-calculator-example-java-sourcecode.html">Memento Pattern - Calculator Example - Java Sourcecode</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Originator Interface</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create Memento</span></span><br><span class="line">    <span class="function">PreviousCalculationToCareTaker <span class="title">backupLastCalculation</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setMemento</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">restorePreviousCalculation</span><span class="params">(PreviousCalculationToCareTaker memento)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCalculationResult</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFirstNumber</span><span class="params">(<span class="keyword">int</span> firstNumber)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSecondNumber</span><span class="params">(<span class="keyword">int</span> secondNumber)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Originator Implementation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorImp</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> firstNumber;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> secondNumber;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PreviousCalculationToCareTaker <span class="title">backupLastCalculation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// create a memento object used for restoring two numbers</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PreviousCalculationImp(firstNumber, secondNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restorePreviousCalculation</span><span class="params">(PreviousCalculationToCareTaker memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstNumber = ((PreviousCalculationToOriginator) memento).getFirstNumber();</span><br><span class="line">        <span class="keyword">this</span>.secondNumber = ((PreviousCalculationToOriginator) memento).getSecondNumber();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCalculationResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// result is adding two numbers</span></span><br><span class="line">        <span class="keyword">return</span> firstNumber + secondNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstNumber</span><span class="params">(<span class="keyword">int</span> firstNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstNumber = firstNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecondNumber</span><span class="params">(<span class="keyword">int</span> secondNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.secondNumber = secondNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Memento Interface to Originator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This interface allows the originator to restore its state</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PreviousCalculationToOriginator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getFirstNumber</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSecondNumber</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  Memento interface to CalculatorOperator (Caretaker)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PreviousCalculationToCareTaker</span> </span>&#123;</span><br><span class="line">    <span class="comment">// no operations permitted for the caretaker</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Memento Object Implementation</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Note that this object implements both interfaces to Originator and CareTaker</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreviousCalculationImp</span> <span class="keyword">implements</span> <span class="title">PreviousCalculationToCareTaker</span>,</span></span><br><span class="line"><span class="class">        <span class="title">PreviousCalculationToOriginator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> firstNumber;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> secondNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PreviousCalculationImp</span><span class="params">(<span class="keyword">int</span> firstNumber, <span class="keyword">int</span> secondNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstNumber = firstNumber;</span><br><span class="line">        <span class="keyword">this</span>.secondNumber = secondNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirstNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSecondNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> secondNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CareTaker object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// program starts</span></span><br><span class="line">        Calculator calculator = <span class="keyword">new</span> CalculatorImp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// assume user enters two numbers</span></span><br><span class="line">        calculator.setFirstNumber(<span class="number">10</span>);</span><br><span class="line">        calculator.setSecondNumber(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find result</span></span><br><span class="line">        System.out.println(calculator.getCalculationResult());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Store result of this calculation in case of error</span></span><br><span class="line">        PreviousCalculationToCareTaker memento = calculator.backupLastCalculation();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// user enters a number</span></span><br><span class="line">        calculator.setFirstNumber(<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// user enters a wrong second number and calculates result</span></span><br><span class="line">        calculator.setSecondNumber(-<span class="number">290</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// calculate result</span></span><br><span class="line">        System.out.println(calculator.getCalculationResult());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// user hits CTRL + Z to undo last operation and see last result</span></span><br><span class="line">        calculator.restorePreviousCalculation(memento);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// result restored</span></span><br><span class="line">        System.out.println(calculator.getCalculationResult());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">110</span><br><span class="line">-273</span><br><span class="line">110</span><br></pre></td></tr></table></figure><h3 id="JDK-10"><a href="#JDK-10" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.io.Serializable</li></ul><h2 id="7-观察者（Observer）"><a href="#7-观察者（Observer）" class="headerlink" title="7. 观察者（Observer）"></a>7. 观察者（Observer）</h2><h3 id="意图-12"><a href="#意图-12" class="headerlink" title="意图"></a>意图</h3><p>定义对象之间的一对多依赖，当一个对象状态改变时，它的所有依赖都会收到通知并且自动更新状态。</p><p>主题（Subject）是被观察的对象，而其所有依赖者（Observer）称为观察者。</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/7a3c6a30-c735-4edb-8115-337288a4f0f2.jpg" width="600"/> </div><br></p><h3 id="类图-12"><a href="#类图-12" class="headerlink" title="类图"></a>类图</h3><p>主题（Subject）具有注册和移除观察者、并通知所有观察者的功能，主题是通过维护一张观察者列表来实现这些操作的。</p><p>观察者（Observer）的注册功能需要调用主题的 registerObserver() 方法。</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/0df5d84c-e7ca-4e3a-a688-bb8e68894467.png"/> </div><br></p><h3 id="实现-11"><a href="#实现-11" class="headerlink" title="实现"></a>实现</h3><p>天气数据布告板会在天气信息发生改变时更新其内容，布告板有多个，并且在将来会继续增加。</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/b1df9732-86ce-4d69-9f06-fba1db7b3b5a.jpg"/> </div><br></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resisterObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resisterObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = observers.indexOf(o);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            observers.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer o : observers) &#123;</span><br><span class="line">            o.update(temperature, humidity, pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatisticsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StatisticsDisplay</span><span class="params">(Subject weatherData)</span> </span>&#123;</span><br><span class="line">        weatherData.resisterObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"StatisticsDisplay.update: "</span> + temp + <span class="string">" "</span> + humidity + <span class="string">" "</span> + pressure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionsDisplay</span><span class="params">(Subject weatherData)</span> </span>&#123;</span><br><span class="line">        weatherData.resisterObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CurrentConditionsDisplay.update: "</span> + temp + <span class="string">" "</span> + humidity + <span class="string">" "</span> + pressure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">        CurrentConditionsDisplay currentConditionsDisplay = <span class="keyword">new</span> CurrentConditionsDisplay(weatherData);</span><br><span class="line">        StatisticsDisplay statisticsDisplay = <span class="keyword">new</span> StatisticsDisplay(weatherData);</span><br><span class="line"></span><br><span class="line">        weatherData.setMeasurements(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">CurrentConditionsDisplay.update: 0.0 0.0 0.0</span><br><span class="line">StatisticsDisplay.update: 0.0 0.0 0.0</span><br><span class="line">CurrentConditionsDisplay.update: 1.0 1.0 1.0</span><br><span class="line">StatisticsDisplay.update: 1.0 1.0 1.0</span><br></pre></td></tr></table></figure><h3 id="JDK-11"><a href="#JDK-11" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Observer.html">java.util.Observer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/EventListener.html">java.util.EventListener</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSessionBindingListener.html">javax.servlet.http.HttpSessionBindingListener</a></li><li><a href="https://github.com/ReactiveX/RxJava">RxJava</a></li></ul><h2 id="8-状态（State）"><a href="#8-状态（State）" class="headerlink" title="8. 状态（State）"></a>8. 状态（State）</h2><h3 id="意图-13"><a href="#意图-13" class="headerlink" title="意图"></a>意图</h3><p>允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它所属的类。</p><h3 id="类图-13"><a href="#类图-13" class="headerlink" title="类图"></a>类图</h3><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/c5085437-54df-4304-b62d-44b961711ba7.png"/> </div><br></p><h3 id="实现-12"><a href="#实现-12" class="headerlink" title="实现"></a>实现</h3><p>糖果销售机有多种状态，每种状态下销售机有不同的行为，状态可以发生转移，使得销售机的行为也发生改变。</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/396be981-3f2c-4fd9-8101-dbf9c841504b.jpg" width="600"/> </div><br></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 投入 25 分钱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退回 25 分钱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转动曲柄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发放糖果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HasQuarterState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HasQuarterState</span><span class="params">(GumballMachine gumballMachine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"You can't insert another quarter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Quarter returned"</span>);</span><br><span class="line">        gumballMachine.setState(gumballMachine.getNoQuarterState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"You turned..."</span>);</span><br><span class="line">        gumballMachine.setState(gumballMachine.getSoldState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"No gumball dispensed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoQuarterState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoQuarterState</span><span class="params">(GumballMachine gumballMachine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"You insert a quarter"</span>);</span><br><span class="line">        gumballMachine.setState(gumballMachine.getHasQuarterState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"You haven't insert a quarter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"You turned, but there's no quarter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"You need to pay first"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoldOutState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SoldOutState</span><span class="params">(GumballMachine gumballMachine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"You can't insert a quarter, the machine is sold out"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"You can't eject, you haven't inserted a quarter yet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"You turned, but there are no gumballs"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"No gumball dispensed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoldState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SoldState</span><span class="params">(GumballMachine gumballMachine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Please wait, we're already giving you a gumball"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Sorry, you already turned the crank"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turning twice doesn't get you another gumball!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        gumballMachine.releaseBall();</span><br><span class="line">        <span class="keyword">if</span> (gumballMachine.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            gumballMachine.setState(gumballMachine.getNoQuarterState());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Oops, out of gumballs"</span>);</span><br><span class="line">            gumballMachine.setState(gumballMachine.getSoldOutState());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GumballMachine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> State soldOutState;</span><br><span class="line">    <span class="keyword">private</span> State noQuarterState;</span><br><span class="line">    <span class="keyword">private</span> State hasQuarterState;</span><br><span class="line">    <span class="keyword">private</span> State soldState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GumballMachine</span><span class="params">(<span class="keyword">int</span> numberGumballs)</span> </span>&#123;</span><br><span class="line">        count = numberGumballs;</span><br><span class="line">        soldOutState = <span class="keyword">new</span> SoldOutState(<span class="keyword">this</span>);</span><br><span class="line">        noQuarterState = <span class="keyword">new</span> NoQuarterState(<span class="keyword">this</span>);</span><br><span class="line">        hasQuarterState = <span class="keyword">new</span> HasQuarterState(<span class="keyword">this</span>);</span><br><span class="line">        soldState = <span class="keyword">new</span> SoldState(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (numberGumballs &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            state = noQuarterState;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            state = soldOutState;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.insertQuarter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.ejectQuarter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.turnCrank();</span><br><span class="line">        state.dispense();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseBall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A gumball comes rolling out the slot..."</span>);</span><br><span class="line">        <span class="keyword">if</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">            count -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getSoldOutState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> soldOutState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getNoQuarterState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> noQuarterState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getHasQuarterState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasQuarterState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getSoldState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> soldState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GumballMachine gumballMachine = <span class="keyword">new</span> GumballMachine(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        gumballMachine.insertQuarter();</span><br><span class="line">        gumballMachine.turnCrank();</span><br><span class="line"></span><br><span class="line">        gumballMachine.insertQuarter();</span><br><span class="line">        gumballMachine.ejectQuarter();</span><br><span class="line">        gumballMachine.turnCrank();</span><br><span class="line"></span><br><span class="line">        gumballMachine.insertQuarter();</span><br><span class="line">        gumballMachine.turnCrank();</span><br><span class="line">        gumballMachine.insertQuarter();</span><br><span class="line">        gumballMachine.turnCrank();</span><br><span class="line">        gumballMachine.ejectQuarter();</span><br><span class="line"></span><br><span class="line">        gumballMachine.insertQuarter();</span><br><span class="line">        gumballMachine.insertQuarter();</span><br><span class="line">        gumballMachine.turnCrank();</span><br><span class="line">        gumballMachine.insertQuarter();</span><br><span class="line">        gumballMachine.turnCrank();</span><br><span class="line">        gumballMachine.insertQuarter();</span><br><span class="line">        gumballMachine.turnCrank();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">You insert a quarter</span><br><span class="line">You turned...</span><br><span class="line">A gumball comes rolling out the slot...</span><br><span class="line">You insert a quarter</span><br><span class="line">Quarter returned</span><br><span class="line">You turned, but there's no quarter</span><br><span class="line">You need to pay first</span><br><span class="line">You insert a quarter</span><br><span class="line">You turned...</span><br><span class="line">A gumball comes rolling out the slot...</span><br><span class="line">You insert a quarter</span><br><span class="line">You turned...</span><br><span class="line">A gumball comes rolling out the slot...</span><br><span class="line">You haven't insert a quarter</span><br><span class="line">You insert a quarter</span><br><span class="line">You can't insert another quarter</span><br><span class="line">You turned...</span><br><span class="line">A gumball comes rolling out the slot...</span><br><span class="line">You insert a quarter</span><br><span class="line">You turned...</span><br><span class="line">A gumball comes rolling out the slot...</span><br><span class="line">Oops, out of gumballs</span><br><span class="line">You can't insert a quarter, the machine is sold out</span><br><span class="line">You turned, but there are no gumballs</span><br><span class="line">No gumball dispensed</span><br></pre></td></tr></table></figure><h2 id="9-策略（Strategy）"><a href="#9-策略（Strategy）" class="headerlink" title="9. 策略（Strategy）"></a>9. 策略（Strategy）</h2><h3 id="意图-14"><a href="#意图-14" class="headerlink" title="意图"></a>意图</h3><p>定义一系列算法，封装每个算法，并使它们可以互换。</p><p>策略模式可以让算法独立于使用它的客户端。</p><h3 id="类图-14"><a href="#类图-14" class="headerlink" title="类图"></a>类图</h3><ul><li>Strategy 接口定义了一个算法族，它们都具有 behavior() 方法。</li><li>Context 是使用到该算法族的类，其中的 doSomething() 方法会调用 behavior()，setStrategy(in Strategy) 方法可以动态地改变 strategy 对象，也就是说能动态地改变 Context 所使用的算法。</li></ul><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/1fc969e4-0e7c-441b-b53c-01950d2f2be5.png"/> </div><br></p><h3 id="与状态模式的比较"><a href="#与状态模式的比较" class="headerlink" title="与状态模式的比较"></a>与状态模式的比较</h3><p>状态模式的类图和策略模式类似，并且都是能够动态改变对象的行为。</p><p>但是状态模式是通过状态转移来改变 Context 所组合的 State 对象，而策略模式是通过 Context 本身的决策来改变组合的 Strategy 对象。</p><p>所谓的状态转移，是指 Context 在运行过程中由于一些条件发生改变而使得 State 对象发生改变，注意必须要是在运行过程中。</p><p>状态模式主要是用来解决状态转移的问题，当状态发生转移了，那么 Context 对象就会改变它的行为；而策略模式主要是用来封装一组可以互相替代的算法族，并且可以根据需要动态地去替换 Context 使用的算法。</p><h3 id="实现-13"><a href="#实现-13" class="headerlink" title="实现"></a>实现</h3><p>设计一个鸭子，它可以动态地改变叫声。这里的算法族是鸭子的叫声行为。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"quack!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squeak</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"squeak!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> QuackBehavior quackBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (quackBehavior != <span class="keyword">null</span>) &#123;</span><br><span class="line">            quackBehavior.quack();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuackBehavior</span><span class="params">(QuackBehavior quackBehavior)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.quackBehavior = quackBehavior;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Duck duck = <span class="keyword">new</span> Duck();</span><br><span class="line">        duck.setQuackBehavior(<span class="keyword">new</span> Squeak());</span><br><span class="line">        duck.performQuack();</span><br><span class="line">        duck.setQuackBehavior(<span class="keyword">new</span> Quack());</span><br><span class="line">        duck.performQuack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">squeak!</span><br><span class="line">quack!</span><br></pre></td></tr></table></figure><h3 id="JDK-12"><a href="#JDK-12" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.util.Comparator#compare()</li><li>javax.servlet.http.HttpServlet</li><li>javax.servlet.Filter#doFilter()</li></ul><h2 id="10-模板方法（Template-Method）"><a href="#10-模板方法（Template-Method）" class="headerlink" title="10. 模板方法（Template Method）"></a>10. 模板方法（Template Method）</h2><h3 id="意图-15"><a href="#意图-15" class="headerlink" title="意图"></a>意图</h3><p>定义算法框架，并将一些步骤的实现延迟到子类。</p><p>通过模板方法，子类可以重新定义算法的某些步骤，而不用改变算法的结构。</p><h3 id="类图-15"><a href="#类图-15" class="headerlink" title="类图"></a>类图</h3><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/c3c1c0e8-3a78-4426-961f-b46dd0879dd8.png"/> </div><br></p><h3 id="实现-14"><a href="#实现-14" class="headerlink" title="实现"></a>实现</h3><p>冲咖啡和冲茶都有类似的流程，但是某些步骤会有点不一样，要求复用那些相同步骤的代码。</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/11236498-1417-46ce-a1b0-e10054256955.png"/> </div><br></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">prepareRecipe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addCondiments();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"boilWater"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"pourInCup"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">CaffeineBeverage</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Coffee.brew"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Coffee.addCondiments"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> <span class="keyword">extends</span> <span class="title">CaffeineBeverage</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Tea.brew"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Tea.addCondiments"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CaffeineBeverage caffeineBeverage = <span class="keyword">new</span> Coffee();</span><br><span class="line">        caffeineBeverage.prepareRecipe();</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        caffeineBeverage = <span class="keyword">new</span> Tea();</span><br><span class="line">        caffeineBeverage.prepareRecipe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">boilWater</span><br><span class="line">Coffee.brew</span><br><span class="line">pourInCup</span><br><span class="line">Coffee.addCondiments</span><br><span class="line">-----------</span><br><span class="line">boilWater</span><br><span class="line">Tea.brew</span><br><span class="line">pourInCup</span><br><span class="line">Tea.addCondiments</span><br></pre></td></tr></table></figure><h3 id="JDK-13"><a href="#JDK-13" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.util.Collections#sort()</li><li>java.io.InputStream#skip()</li><li>java.io.InputStream#read()</li><li>java.util.AbstractList#indexOf()</li></ul><h2 id="11-访问者（Visitor）"><a href="#11-访问者（Visitor）" class="headerlink" title="11. 访问者（Visitor）"></a>11. 访问者（Visitor）</h2><h3 id="意图-16"><a href="#意图-16" class="headerlink" title="意图"></a>意图</h3><p>为一个对象结构（比如组合结构）增加新能力。</p><h3 id="类图-16"><a href="#类图-16" class="headerlink" title="类图"></a>类图</h3><ul><li>Visitor：访问者，为每一个 ConcreteElement 声明一个 visit 操作</li><li>ConcreteVisitor：具体访问者，存储遍历过程中的累计结果</li><li>ObjectStructure：对象结构，可以是组合结构，或者是一个集合。</li></ul><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/ec923dc7-864c-47b0-a411-1f2c48d084de.png"/> </div><br></p><h3 id="实现-15"><a href="#实现-15" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Customer&gt; customers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Customer customer : customers) &#123;</span><br><span class="line">            customer.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        customers.add(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    Customer(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addOrder</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        orders.add(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">for</span> (Order order : orders) &#123;</span><br><span class="line">            order.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Item&gt; items = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    Order(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Order(String name, String itemName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.addItem(<span class="keyword">new</span> Item(itemName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addItem</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        items.add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">            item.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    Item(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Order order)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Item item)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneralReport</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> customersNo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ordersNo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> itemsNo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        System.out.println(customer.getName());</span><br><span class="line">        customersNo++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        System.out.println(order.getName());</span><br><span class="line">        ordersNo++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        System.out.println(item.getName());</span><br><span class="line">        itemsNo++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayResults</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Number of customers: "</span> + customersNo);</span><br><span class="line">        System.out.println(<span class="string">"Number of orders:    "</span> + ordersNo);</span><br><span class="line">        System.out.println(<span class="string">"Number of items:     "</span> + itemsNo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Customer customer1 = <span class="keyword">new</span> Customer(<span class="string">"customer1"</span>);</span><br><span class="line">        customer1.addOrder(<span class="keyword">new</span> Order(<span class="string">"order1"</span>, <span class="string">"item1"</span>));</span><br><span class="line">        customer1.addOrder(<span class="keyword">new</span> Order(<span class="string">"order2"</span>, <span class="string">"item1"</span>));</span><br><span class="line">        customer1.addOrder(<span class="keyword">new</span> Order(<span class="string">"order3"</span>, <span class="string">"item1"</span>));</span><br><span class="line"></span><br><span class="line">        Order order = <span class="keyword">new</span> Order(<span class="string">"order_a"</span>);</span><br><span class="line">        order.addItem(<span class="keyword">new</span> Item(<span class="string">"item_a1"</span>));</span><br><span class="line">        order.addItem(<span class="keyword">new</span> Item(<span class="string">"item_a2"</span>));</span><br><span class="line">        order.addItem(<span class="keyword">new</span> Item(<span class="string">"item_a3"</span>));</span><br><span class="line">        Customer customer2 = <span class="keyword">new</span> Customer(<span class="string">"customer2"</span>);</span><br><span class="line">        customer2.addOrder(order);</span><br><span class="line"></span><br><span class="line">        CustomerGroup customers = <span class="keyword">new</span> CustomerGroup();</span><br><span class="line">        customers.addCustomer(customer1);</span><br><span class="line">        customers.addCustomer(customer2);</span><br><span class="line"></span><br><span class="line">        GeneralReport visitor = <span class="keyword">new</span> GeneralReport();</span><br><span class="line">        customers.accept(visitor);</span><br><span class="line">        visitor.displayResults();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">customer1</span><br><span class="line">order1</span><br><span class="line">item1</span><br><span class="line">order2</span><br><span class="line">item1</span><br><span class="line">order3</span><br><span class="line">item1</span><br><span class="line">customer2</span><br><span class="line">order_a</span><br><span class="line">item_a1</span><br><span class="line">item_a2</span><br><span class="line">item_a3</span><br><span class="line">Number of customers: 2</span><br><span class="line">Number of orders:    4</span><br><span class="line">Number of items:     6</span><br></pre></td></tr></table></figure><h3 id="JDK-14"><a href="#JDK-14" class="headerlink" title="JDK"></a>JDK</h3><ul><li>javax.lang.model.element.Element and javax.lang.model.element.ElementVisitor</li><li>javax.lang.model.type.TypeMirror and javax.lang.model.type.TypeVisitor</li></ul><h2 id="12-空对象（Null）"><a href="#12-空对象（Null）" class="headerlink" title="12. 空对象（Null）"></a>12. 空对象（Null）</h2><h3 id="意图-17"><a href="#意图-17" class="headerlink" title="意图"></a>意图</h3><p>使用什么都不做的空对象来替代 NULL。</p><p>一个方法返回 NULL，意味着方法的调用端需要去检查返回值是否是 NULL，这么做会导致非常多的冗余的检查代码。并且如果某一个调用端忘记了做这个检查返回值，而直接使用返回的对象，那么就有可能抛出空指针异常。</p><h3 id="类图-17"><a href="#类图-17" class="headerlink" title="类图"></a>类图</h3><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/dd3b289c-d90e-44a6-a44c-4880517eb1de.png"/> </div><br></p><h3 id="实现-16"><a href="#实现-16" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractOperation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealOperation</span> <span class="keyword">extends</span> <span class="title">AbstractOperation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullOperation</span> <span class="keyword">extends</span> <span class="title">AbstractOperation</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractOperation abstractOperation = func(-<span class="number">1</span>);</span><br><span class="line">        abstractOperation.request();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractOperation <span class="title">func</span><span class="params">(<span class="keyword">int</span> para)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (para &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NullOperation();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RealOperation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、结构型"><a href="#四、结构型" class="headerlink" title="四、结构型"></a>四、结构型</h1><h2 id="1-适配器（Adapter）"><a href="#1-适配器（Adapter）" class="headerlink" title="1. 适配器（Adapter）"></a>1. 适配器（Adapter）</h2><h3 id="意图-18"><a href="#意图-18" class="headerlink" title="意图"></a>意图</h3><p>把一个类接口转换成另一个用户需要的接口。</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/3d5b828e-5c4d-48d8-a440-281e4a8e1c92.png"/> </div><br></p><h3 id="类图-18"><a href="#类图-18" class="headerlink" title="类图"></a>类图</h3><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/0f754c1d-b5cb-48cd-90e0-4a86034290a1.png"/> </div><br></p><h3 id="实现-17"><a href="#实现-17" class="headerlink" title="实现"></a>实现</h3><p>鸭子（Duck）和火鸡（Turkey）拥有不同的叫声，Duck 的叫声调用 quack() 方法，而 Turkey 调用 gobble() 方法。</p><p>要求将 Turkey 的 gobble() 方法适配成 Duck 的 quack() 方法，从而让火鸡冒充鸭子！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildTurkey</span> <span class="keyword">implements</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"gobble!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurkeyAdapter</span> <span class="keyword">implements</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    Turkey turkey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TurkeyAdapter</span><span class="params">(Turkey turkey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.turkey = turkey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        turkey.gobble();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Turkey turkey = <span class="keyword">new</span> WildTurkey();</span><br><span class="line">        Duck duck = <span class="keyword">new</span> TurkeyAdapter(turkey);</span><br><span class="line">        duck.quack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK-15"><a href="#JDK-15" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList%28T...%29">java.util.Arrays#asList()</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#list-java.util.Enumeration-">java.util.Collections#list()</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-">java.util.Collections#enumeration()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal-BoundType-">javax.xml.bind.annotation.adapters.XMLAdapter</a></li></ul><h2 id="2-桥接（Bridge）"><a href="#2-桥接（Bridge）" class="headerlink" title="2. 桥接（Bridge）"></a>2. 桥接（Bridge）</h2><h3 id="意图-19"><a href="#意图-19" class="headerlink" title="意图"></a>意图</h3><p>将抽象与实现分离开来，使它们可以独立变化。</p><h3 id="类图-19"><a href="#类图-19" class="headerlink" title="类图"></a>类图</h3><ul><li>Abstraction：定义抽象类的接口</li><li>Implementor：定义实现类接口</li></ul><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/c2cbf5d2-82af-4c78-bd43-495da5adf55f.png"/> </div><br></p><h3 id="实现-18"><a href="#实现-18" class="headerlink" title="实现"></a>实现</h3><p>RemoteControl 表示遥控器，指代 Abstraction。</p><p>TV 表示电视，指代 Implementor。</p><p>桥接模式将遥控器和电视分离开来，从而可以独立改变遥控器或者电视的实现。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">tuneChannel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sony</span> <span class="keyword">extends</span> <span class="title">TV</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Sony.on()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Sony.off()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tuneChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Sony.tuneChannel()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RCA</span> <span class="keyword">extends</span> <span class="title">TV</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"RCA.on()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"RCA.off()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tuneChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"RCA.tuneChannel()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemoteControl</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">tuneChannel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteRemoteControl1</span> <span class="keyword">extends</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteRemoteControl1</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(tv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteRemoteControl1.on()"</span>);</span><br><span class="line">        tv.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteRemoteControl1.off()"</span>);</span><br><span class="line">        tv.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tuneChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteRemoteControl1.tuneChannel()"</span>);</span><br><span class="line">        tv.tuneChannel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteRemoteControl2</span> <span class="keyword">extends</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteRemoteControl2</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(tv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteRemoteControl2.on()"</span>);</span><br><span class="line">        tv.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteRemoteControl2.off()"</span>);</span><br><span class="line">        tv.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tuneChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteRemoteControl2.tuneChannel()"</span>);</span><br><span class="line">        tv.tuneChannel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RemoteControl remoteControl1 = <span class="keyword">new</span> ConcreteRemoteControl1(<span class="keyword">new</span> RCA());</span><br><span class="line">        remoteControl1.on();</span><br><span class="line">        remoteControl1.off();</span><br><span class="line">        remoteControl1.tuneChannel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK-16"><a href="#JDK-16" class="headerlink" title="JDK"></a>JDK</h3><ul><li>AWT (It provides an abstraction layer which maps onto the native OS the windowing support.)</li><li>JDBC</li></ul><h2 id="3-组合（Composite）"><a href="#3-组合（Composite）" class="headerlink" title="3. 组合（Composite）"></a>3. 组合（Composite）</h2><h3 id="意图-20"><a href="#意图-20" class="headerlink" title="意图"></a>意图</h3><p>将对象组合成树形结构来表示“整体/部分”层次关系，允许用户以相同的方式处理单独对象和组合对象。</p><h3 id="类图-20"><a href="#类图-20" class="headerlink" title="类图"></a>类图</h3><p>组件（Component）类是组合类（Composite）和叶子类（Leaf）的父类，可以把组合类看成是树的中间节点。</p><p>组合对象拥有一个或者多个组件对象，因此组合对象的操作可以委托给组件对象去处理，而组件对象可以是另一个组合对象或者叶子对象。</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/3fb5b255-b791-45b6-8754-325c8741855a.png"/> </div><br></p><h3 id="实现-19"><a href="#实现-19" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Component</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> level)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Component&gt; child;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Composite</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        child = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">"--"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Composite:"</span> + name);</span><br><span class="line">        <span class="keyword">for</span> (Component component : child) &#123;</span><br><span class="line">            component.print(level + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        child.add(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        child.remove(component);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">"--"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"left:"</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(); <span class="comment">// 牺牲透明性换取单一职责原则，这样就不用考虑是叶子节点还是组合节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Composite root = <span class="keyword">new</span> Composite(<span class="string">"root"</span>);</span><br><span class="line">        Component node1 = <span class="keyword">new</span> Leaf(<span class="string">"1"</span>);</span><br><span class="line">        Component node2 = <span class="keyword">new</span> Composite(<span class="string">"2"</span>);</span><br><span class="line">        Component node3 = <span class="keyword">new</span> Leaf(<span class="string">"3"</span>);</span><br><span class="line">        root.add(node1);</span><br><span class="line">        root.add(node2);</span><br><span class="line">        root.add(node3);</span><br><span class="line">        Component node21 = <span class="keyword">new</span> Leaf(<span class="string">"21"</span>);</span><br><span class="line">        Component node22 = <span class="keyword">new</span> Composite(<span class="string">"22"</span>);</span><br><span class="line">        node2.add(node21);</span><br><span class="line">        node2.add(node22);</span><br><span class="line">        Component node221 = <span class="keyword">new</span> Leaf(<span class="string">"221"</span>);</span><br><span class="line">        node22.add(node221);</span><br><span class="line">        root.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Composite:root</span><br><span class="line">--left:1</span><br><span class="line">--Composite:2</span><br><span class="line">----left:21</span><br><span class="line">----Composite:22</span><br><span class="line">------left:221</span><br><span class="line">--left:3</span><br></pre></td></tr></table></figure><h3 id="JDK-17"><a href="#JDK-17" class="headerlink" title="JDK"></a>JDK</h3><ul><li>javax.swing.JComponent#add(Component)</li><li>java.awt.Container#add(Component)</li><li>java.util.Map#putAll(Map)</li><li>java.util.List#addAll(Collection)</li><li>java.util.Set#addAll(Collection)</li></ul><h2 id="4-装饰（Decorator）"><a href="#4-装饰（Decorator）" class="headerlink" title="4. 装饰（Decorator）"></a>4. 装饰（Decorator）</h2><h3 id="意图-21"><a href="#意图-21" class="headerlink" title="意图"></a>意图</h3><p>为对象动态添加功能。</p><h3 id="类图-21"><a href="#类图-21" class="headerlink" title="类图"></a>类图</h3><p>装饰者（Decorator）和具体组件（ConcreteComponent）都继承自组件（Component），具体组件的方法实现不需要依赖于其它对象，而装饰者组合了一个组件，这样它可以装饰其它装饰者或者具体组件。所谓装饰，就是把这个装饰者套在被装饰上，从而动态扩展被装饰者的功能。装饰者的方法有一部分是自己的，这属于它的功能，然后调用被装饰者的方法实现，从而也保留了被装饰者的功能。可以看到，具体组件应当是装饰层次的最低层，因为只有具体组件的方法实现不需要依赖于其它对象。</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/137c593d-0a9e-47b8-a9e6-b71f540b82dd.png"/> </div><br></p><h3 id="实现-20"><a href="#实现-20" class="headerlink" title="实现"></a>实现</h3><p>设计不同种类的饮料，饮料可以添加配料，比如可以添加牛奶，并且支持动态添加新配料。每增加一种配料，该饮料的价格就会增加，要求计算一种饮料的价格。</p><p>下图表示在 DarkRoast 饮料上新增新添加 Mocha 配料，之后又添加了 Whip 配料。DarkRoast 被 Mocha 包裹，Mocha 又被 Whip 包裹。它们都继承自相同父类，都有 cost() 方法，外层类的 cost() 方法调用了内层类的 cost() 方法。</p><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/c9cfd600-bc91-4f3a-9f99-b42f88a5bb24.jpg" width="600"/> </div><br></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DarkRoast</span> <span class="keyword">implements</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBlend</span> <span class="keyword">implements</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">implements</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Beverage beverage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Beverage beverage = <span class="keyword">new</span> HouseBlend();</span><br><span class="line">        beverage = <span class="keyword">new</span> Mocha(beverage);</span><br><span class="line">        beverage = <span class="keyword">new</span> Milk(beverage);</span><br><span class="line">        System.out.println(beverage.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">3.0</span><br></pre></td></tr></table></figure><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>类应该对扩展开放，对修改关闭：也就是添加新功能时不需要修改代码。饮料可以动态添加新的配料，而不需要去修改饮料的代码。</p><p>不可能把所有的类设计成都满足这一原则，应当把该原则应用于最有可能发生改变的地方。</p><h3 id="JDK-18"><a href="#JDK-18" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.io.BufferedInputStream(InputStream)</li><li>java.io.DataInputStream(InputStream)</li><li>java.io.BufferedOutputStream(OutputStream)</li><li>java.util.zip.ZipOutputStream(OutputStream)</li><li>java.util.Collections#checked<a href="">List|Map|Set|SortedSet|SortedMap</a></li></ul><h2 id="5-外观（Facade）"><a href="#5-外观（Facade）" class="headerlink" title="5. 外观（Facade）"></a>5. 外观（Facade）</h2><h3 id="意图-22"><a href="#意图-22" class="headerlink" title="意图"></a>意图</h3><p>提供了一个统一的接口，用来访问子系统中的一群接口，从而让子系统更容易使用。</p><h3 id="类图-22"><a href="#类图-22" class="headerlink" title="类图"></a>类图</h3><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/f9978fa6-9f49-4a0f-8540-02d269ac448f.png"/> </div><br></p><h3 id="实现-21"><a href="#实现-21" class="headerlink" title="实现"></a>实现</h3><p>观看电影需要操作很多电器，使用外观模式可以实现一键看电影功能。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubSystem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOnTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"turnOnTV()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCD</span><span class="params">(String cd)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"setCD( "</span> + cd + <span class="string">" )"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starWatching</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"starWatching()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SubSystem subSystem = <span class="keyword">new</span> SubSystem();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchMovie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        subSystem.turnOnTV();</span><br><span class="line">        subSystem.setCD(<span class="string">"a movie"</span>);</span><br><span class="line">        subSystem.starWatching();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">        facade.watchMovie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计原则-1"><a href="#设计原则-1" class="headerlink" title="设计原则"></a>设计原则</h3><p>最少知识原则：只和你的密友谈话。也就是客户对象所需要交互的对象应当尽可能少。</p><h2 id="6-享元（Flyweight）"><a href="#6-享元（Flyweight）" class="headerlink" title="6. 享元（Flyweight）"></a>6. 享元（Flyweight）</h2><h3 id="意图-23"><a href="#意图-23" class="headerlink" title="意图"></a>意图</h3><p>利用共享的方式来支持大量细粒度的对象，这些对象一部分内部状态是相同的。</p><h3 id="类图-23"><a href="#类图-23" class="headerlink" title="类图"></a>类图</h3><ul><li>Flyweight：享元对象</li><li>IntrinsicState：内部状态，相同的项元对象共享</li><li>ExtrinsicState：外部状态</li></ul><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/d52270b4-9097-4667-9f18-f405fc661c99.png"/> </div><br></p><h3 id="实现-22"><a href="#实现-22" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doOperation</span><span class="params">(String extrinsicState)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">implements</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String intrinsicState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteFlyweight</span><span class="params">(String intrinsicState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.intrinsicState = intrinsicState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doOperation</span><span class="params">(String extrinsicState)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Object address: "</span> + System.identityHashCode(<span class="keyword">this</span>));</span><br><span class="line">        System.out.println(<span class="string">"IntrinsicState: "</span> + intrinsicState);</span><br><span class="line">        System.out.println(<span class="string">"ExtrinsicState: "</span> + extrinsicState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Flyweight&gt; flyweights = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function">Flyweight <span class="title">getFlyweight</span><span class="params">(String intrinsicState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!flyweights.containsKey(intrinsicState)) &#123;</span><br><span class="line">            Flyweight flyweight = <span class="keyword">new</span> ConcreteFlyweight(intrinsicState);</span><br><span class="line">            flyweights.put(intrinsicState, flyweight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flyweights.get(intrinsicState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FlyweightFactory factory = <span class="keyword">new</span> FlyweightFactory();</span><br><span class="line">        Flyweight flyweight1 = factory.getFlyweight(<span class="string">"aa"</span>);</span><br><span class="line">        Flyweight flyweight2 = factory.getFlyweight(<span class="string">"aa"</span>);</span><br><span class="line">        flyweight1.doOperation(<span class="string">"x"</span>);</span><br><span class="line">        flyweight2.doOperation(<span class="string">"y"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Object address: 1163157884</span><br><span class="line">IntrinsicState: aa</span><br><span class="line">ExtrinsicState: x</span><br><span class="line">Object address: 1163157884</span><br><span class="line">IntrinsicState: aa</span><br><span class="line">ExtrinsicState: y</span><br></pre></td></tr></table></figure><h3 id="JDK-19"><a href="#JDK-19" class="headerlink" title="JDK"></a>JDK</h3><p>Java 利用缓存来加速大量小对象的访问时间。</p><ul><li>java.lang.Integer#valueOf(int)</li><li>java.lang.Boolean#valueOf(boolean)</li><li>java.lang.Byte#valueOf(byte)</li><li>java.lang.Character#valueOf(char)</li></ul><h2 id="7-代理（Proxy）"><a href="#7-代理（Proxy）" class="headerlink" title="7. 代理（Proxy）"></a>7. 代理（Proxy）</h2><h3 id="意图-24"><a href="#意图-24" class="headerlink" title="意图"></a>意图</h3><p>控制对其它对象的访问。</p><h3 id="类图-24"><a href="#类图-24" class="headerlink" title="类图"></a>类图</h3><p>代理有以下四类：</p><ul><li>远程代理（Remote Proxy）：控制对远程对象（不同地址空间）的访问，它负责将请求及其参数进行编码，并向不同地址空间中的对象发送已经编码的请求。</li><li>虚拟代理（Virtual Proxy）：根据需要创建开销很大的对象，它可以缓存实体的附加信息，以便延迟对它的访问，例如在网站加载一个很大图片时，不能马上完成，可以用虚拟代理缓存图片的大小信息，然后生成一张临时图片代替原始图片。</li><li>保护代理（Protection Proxy）：按权限控制对象的访问，它负责检查调用者是否具有实现一个请求所必须的访问权限。</li><li>智能代理（Smart Reference）：取代了简单的指针，它在访问对象时执行一些附加操作：记录对象的引用次数，比如智能智能；当第一次引用一个持久化对象时，将它装入内存；在访问一个实际对象前，检查是否已经锁定了它，以确保其它对象不能改变它。</li></ul><p><div align="center"> <img src="https://cyc2018.gitbooks.io/interview-notebook/content/pics/a6c20f60-5eba-427d-9413-352ada4b40fe.png"/> </div><br></p><h3 id="实现-23"><a href="#实现-23" class="headerlink" title="实现"></a>实现</h3><p>以下是一个虚拟代理的实现，模拟了图片延迟加载的情况下使用与图片大小相等的临时内容去替换原始图片，直到图片加载完成才将图片显示出来。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showImage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighResolutionImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> URL imageURL;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> startTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HighResolutionImage</span><span class="params">(URL imageURL)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.imageURL = imageURL;</span><br><span class="line">        <span class="keyword">this</span>.startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">this</span>.width = <span class="number">600</span>;</span><br><span class="line">        <span class="keyword">this</span>.height = <span class="number">600</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟图片加载，延迟 3s 加载完成</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">return</span> endTime - startTime &gt; <span class="number">3000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Real Image: "</span> + imageURL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageProxy</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HighResolutionImage highResolutionImage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageProxy</span><span class="params">(HighResolutionImage highResolutionImage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.highResolutionImage = highResolutionImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!highResolutionImage.isLoad()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"Temp Image: "</span> + highResolutionImage.getWidth() + <span class="string">" "</span> + highResolutionImage.getHeight());</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        highResolutionImage.showImage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageViewer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String image = <span class="string">"http://image.jpg"</span>;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(image);</span><br><span class="line">        HighResolutionImage highResolutionImage = <span class="keyword">new</span> HighResolutionImage(url);</span><br><span class="line">        ImageProxy imageProxy = <span class="keyword">new</span> ImageProxy(highResolutionImage);</span><br><span class="line">        imageProxy.showImage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK-20"><a href="#JDK-20" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.lang.reflect.Proxy</li><li>RMI</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>弗里曼. Head First 设计模式 [M]. 中国电力出版社, 2007.</li><li>Gamma E. 设计模式: 可复用面向对象软件的基础 [M]. 机械工业出版社, 2007.</li><li>Bloch J. Effective java[M]. Addison-Wesley Professional, 2017.</li><li><a href="http://www.oodesign.com/">Design Patterns</a></li><li><a href="http://java-design-patterns.com/">Design patterns implemented in Java</a></li><li><a href="http://www.programering.com/a/MTNxAzMwATY.html">The breakdown of design patterns in JDK</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
